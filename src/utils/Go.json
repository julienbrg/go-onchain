{
  "address": "0x7eD8E856531Dd1958Acd0a0bd486b7D36BD3Ff96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_black",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerNotAllowedToPlay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotPlayHere",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingTwoConsecutivePass",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLiberties",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OffBoard",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "player",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "Capture",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "blackScore",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "whiteScore",
          "type": "int256"
        }
      ],
      "name": "End",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "player",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "Move",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "Start",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GOBAN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GROUP_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "black",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blackPassedOnce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blackScore",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capturedBlackStones",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capturedWhiteStones",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_position",
          "type": "uint256"
        }
      ],
      "name": "countLiberties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "getIntersection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_y",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_b",
          "type": "uint256"
        }
      ],
      "name": "getIntersectionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        }
      ],
      "name": "getNeighbors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "east",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "west",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "north",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "south",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "intersections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "enum Go.State",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_b",
          "type": "uint256"
        }
      ],
      "name": "isOffBoard",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_y",
          "type": "uint256"
        }
      ],
      "name": "play",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "white",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitePassedOnce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whiteScore",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65729adc5ba5de8d4f862fab668fe23984aee9863d05434c2975fc43c36893f7",
  "receipt": {
    "to": null,
    "from": "0x4006059FF62F6254E1fC8E38B9dff549449AfE69",
    "contractAddress": "0x7eD8E856531Dd1958Acd0a0bd486b7D36BD3Ff96",
    "transactionIndex": 52,
    "gasUsed": "17944080",
    "logsBloom": "0x00000000000000000000000000000000000000000000400000000000000000800000000000000000000000000000040000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000020000000000000000000000000000010000000000000000000000000000000000000000000000000000000080010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7e898a87860b5495b18f4cc1a0997147a51ba304c29310edc0471b456f74976f",
    "transactionHash": "0x65729adc5ba5de8d4f862fab668fe23984aee9863d05434c2975fc43c36893f7",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 7086805,
        "transactionHash": "0x65729adc5ba5de8d4f862fab668fe23984aee9863d05434c2975fc43c36893f7",
        "address": "0x7eD8E856531Dd1958Acd0a0bd486b7D36BD3Ff96",
        "topics": [
          "0x1ae8a3352c09a112af4762cb69bd600767fc7b8164c902a005c01d39a9578cb6",
          "0x1e0f7a6dcecdbb637dff7248550c127a8e37e42547dfd45ade210e11012d7928"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x7e898a87860b5495b18f4cc1a0997147a51ba304c29310edc0471b456f74976f"
      }
    ],
    "blockNumber": 7086805,
    "cumulativeGasUsed": "24803171",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe61A1a5278290B6520f0CEf3F2c71Ba70CF5cf4C",
    "0xe61A1a5278290B6520f0CEf3F2c71Ba70CF5cf4C"
  ],
  "numDeployments": 1,
  "solcInputHash": "b2b13033446edc13e16531b344ac6a42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_black\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotAllowedToPlay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotPlayHere\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingTwoConsecutivePass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLiberties\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OffBoard\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"player\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Capture\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"blackScore\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"whiteScore\",\"type\":\"int256\"}],\"name\":\"End\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"player\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"Start\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOBAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GROUP_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"black\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackPassedOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackScore\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capturedBlackStones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capturedWhiteStones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"countLiberties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"getIntersection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"getIntersectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getNeighbors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"east\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"west\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"north\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"south\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intersections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"enum Go.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"isOffBoard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"white\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitePassedOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteScore\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Claude\",\"custom:security-contact\":\"julien@beren.dev\",\"details\":\"Handles game logic for two players including stone placement, liberties, captures, and scoring\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets up the board and assigns players\",\"params\":{\"_black\":\"Address of the black player\",\"_white\":\"Address of the white player\"}},\"getIntersection(uint256)\":{\"params\":{\"_target\":\"Position ID\"},\"returns\":{\"_x\":\"X coordinate\",\"_y\":\"Y coordinate\"}},\"getIntersectionId(uint256,uint256)\":{\"params\":{\"_a\":\"X coordinate\",\"_b\":\"Y coordinate\"},\"returns\":{\"_0\":\"uint Position ID\"}},\"isOffBoard(uint256,uint256)\":{\"params\":{\"_a\":\"X coordinate\",\"_b\":\"Y coordinate\"},\"returns\":{\"_0\":\"bool True if position is off board\"}},\"pass()\":{\"details\":\"Two consecutive passes end the game\"},\"play(uint256,uint256)\":{\"details\":\"Handles turn logic, stone placement, and capture checking\",\"params\":{\"_x\":\"X coordinate\",\"_y\":\"Y coordinate\"}}},\"title\":\"Go\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes a new game of Go\"},\"getIntersection(uint256)\":{\"notice\":\"Converts a board position ID to x,y coordinates\"},\"getIntersectionId(uint256,uint256)\":{\"notice\":\"Converts x,y coordinates to a board position ID\"},\"isOffBoard(uint256,uint256)\":{\"notice\":\"Checks if coordinates are outside the board\"},\"pass()\":{\"notice\":\"Allows a player to pass their turn\"},\"play(uint256,uint256)\":{\"notice\":\"Places a stone on the board\"}},\"notice\":\"Implements the game of Go on the blockchain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Go.sol\":\"Go\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOc\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Go.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Go\\n * @author Claude\\n * @notice Implements the game of Go on the blockchain\\n * @dev Handles game logic for two players including stone placement, liberties, captures, and scoring\\n * @custom:security-contact julien@beren.dev\\n */\\ncontract Go {\\n    error CallerNotAllowedToPlay();\\n    error NotYourTurn();\\n    error CannotPlayHere();\\n    error OffBoard();\\n    error MissingTwoConsecutivePass();\\n    error NoLiberties();\\n\\n    uint public constant GOBAN = 19 * 19;\\n    uint public constant WIDTH = 19;\\n    uint public constant MAX_GROUP_SIZE = 100;\\n\\n    address public immutable white;\\n    address public immutable black;\\n    address public turn;\\n\\n    uint public capturedWhiteStones;\\n    uint public capturedBlackStones;\\n    bool public blackPassedOnce;\\n    bool public whitePassedOnce;\\n    int public blackScore;\\n    int public whiteScore;\\n\\n    /**\\n     * @dev Represents a single point on the Go board\\n     * @param x The x coordinate\\n     * @param y The y coordinate\\n     * @param state The current state of this intersection (empty, black, or white)\\n     */\\n    struct Intersection {\\n        uint x;\\n        uint y;\\n        State state;\\n    }\\n\\n    Intersection[361] public intersections;\\n\\n    /**\\n     * @dev Represents possible states of an intersection\\n     */\\n    enum State {\\n        Empty,\\n        Black,\\n        White\\n    }\\n\\n    event Start(string indexed statement);\\n    event Move(string indexed player, uint indexed x, uint indexed y);\\n    event End(string indexed statement, int indexed blackScore, int indexed whiteScore);\\n    event Capture(string indexed player, uint indexed count);\\n\\n    /**\\n     * @notice Initializes a new game of Go\\n     * @dev Sets up the board and assigns players\\n     * @param _white Address of the white player\\n     * @param _black Address of the black player\\n     */\\n    constructor(address _white, address _black) {\\n        white = _white;\\n        black = _black;\\n        turn = black;\\n\\n        uint i;\\n        for (uint k; k < WIDTH; k++) {\\n            for (uint j; j < WIDTH; j++) {\\n                intersections[i++] = Intersection({x: j, y: k, state: State.Empty});\\n            }\\n        }\\n        require(i == GOBAN, \\\"ERROR_DURING_GOBAN_INIT\\\");\\n        emit Start(\\\"The game has started.\\\");\\n    }\\n\\n    // Separate function for processing captures\\n    function processCapture(uint[] memory group, State _opposingColor) private returns (uint) {\\n        uint captureCount = 0;\\n        for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n            if (intersections[group[j]].state == _opposingColor) {\\n                intersections[group[j]].state = State.Empty;\\n                captureCount++;\\n            }\\n        }\\n        return captureCount;\\n    }\\n\\n    // Modified capture processing\\n    function processGroupCapture(uint[] memory group, State _opposingColor) private returns (uint) {\\n        uint captureCount = 0;\\n        bool[] memory processed = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            uint pos = group[i];\\n            if (!processed[pos] && intersections[pos].state == _opposingColor) {\\n                intersections[pos].state = State.Empty;\\n                processed[pos] = true;\\n                captureCount++;\\n            }\\n        }\\n        return captureCount;\\n    }\\n\\n    // Helper function to count group liberties\\n    function countGroupLiberties(uint[] memory group) private view returns (uint) {\\n        uint liberties = 0;\\n        bool[] memory checkedPositions = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            (uint east, uint west, uint north, uint south) = getNeighbors(group[i]);\\n\\n            // Check each neighbor\\n            if (east != 0 && !checkedPositions[east]) {\\n                checkedPositions[east] = true;\\n                if (intersections[east].state == State.Empty) liberties++;\\n            }\\n            if (west != 0 && !checkedPositions[west]) {\\n                checkedPositions[west] = true;\\n                if (intersections[west].state == State.Empty) liberties++;\\n            }\\n            if (north != 0 && !checkedPositions[north]) {\\n                checkedPositions[north] = true;\\n                if (intersections[north].state == State.Empty) liberties++;\\n            }\\n            if (south != 0 && !checkedPositions[south]) {\\n                checkedPositions[south] = true;\\n                if (intersections[south].state == State.Empty) liberties++;\\n            }\\n        }\\n        return liberties;\\n    }\\n\\n    function countLiberties(uint _position) public view returns (uint) {\\n        uint liberties = 0;\\n        (uint x, uint y) = positionToCoords(_position);\\n\\n        // Check each adjacent position\\n        if (x + 1 < WIDTH && intersections[coordsToPosition(x + 1, y)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (x > 0 && intersections[coordsToPosition(x - 1, y)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (y + 1 < WIDTH && intersections[coordsToPosition(x, y + 1)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (y > 0 && intersections[coordsToPosition(x, y - 1)].state == State.Empty) {\\n            liberties++;\\n        }\\n\\n        return liberties;\\n    }\\n\\n    /**\\n     * @notice Places a stone on the board\\n     * @dev Handles turn logic, stone placement, and capture checking\\n     * @param _x X coordinate\\n     * @param _y Y coordinate\\n     */\\n    function play(uint _x, uint _y) public {\\n        if (msg.sender != white && msg.sender != black) revert CallerNotAllowedToPlay();\\n        if (isOffBoard(_x, _y)) revert OffBoard();\\n\\n        State playerColor = (msg.sender == white) ? State.White : State.Black;\\n        address expectedTurn = (playerColor == State.White) ? white : black;\\n        if (turn != expectedTurn) revert NotYourTurn();\\n\\n        uint move = getIntersectionId(_x, _y);\\n        if (intersections[move].state != State.Empty) revert CannotPlayHere();\\n\\n        intersections[move].state = playerColor;\\n\\n        bool hasLiberties = countLiberties(move) > 0;\\n        bool capturedOpponent = checkForCaptures(\\n            move,\\n            playerColor == State.White ? State.Black : State.White\\n        );\\n\\n        if (!hasLiberties && !capturedOpponent) {\\n            intersections[move].state = State.Empty;\\n            revert NoLiberties();\\n        }\\n\\n        turn = (msg.sender == white) ? black : white;\\n\\n        if (playerColor == State.White) {\\n            whitePassedOnce = false;\\n        } else {\\n            blackPassedOnce = false;\\n        }\\n\\n        emit Move(playerColor == State.White ? \\\"White\\\" : \\\"Black\\\", _x, _y);\\n    }\\n\\n    /**\\n     * @notice Allows a player to pass their turn\\n     * @dev Two consecutive passes end the game\\n     */\\n    function pass() public {\\n        if (msg.sender != white && msg.sender != black) revert CallerNotAllowedToPlay();\\n\\n        State playerColor = (msg.sender == white) ? State.White : State.Black;\\n        address expectedTurn = (playerColor == State.White) ? white : black;\\n        if (turn != expectedTurn) revert NotYourTurn();\\n\\n        if (msg.sender == white) {\\n            whitePassedOnce = true;\\n            turn = black;\\n            emit Move(\\\"White\\\", 42, 42);\\n        } else {\\n            blackPassedOnce = true;\\n            turn = white;\\n            emit Move(\\\"Black\\\", 42, 42);\\n        }\\n\\n        if (blackPassedOnce && whitePassedOnce) {\\n            end();\\n        }\\n    }\\n\\n    // Helper function to validate coordinates\\n    function isValidPosition(uint x, uint y) private pure returns (bool) {\\n        return x < WIDTH && y < WIDTH;\\n    }\\n\\n    // Helper functions for position conversions\\n    function coordsToPosition(uint x, uint y) private pure returns (uint) {\\n        require(x < WIDTH && y < WIDTH, \\\"Invalid coordinates\\\");\\n        return y * WIDTH + x;\\n    }\\n\\n    function positionToCoords(uint pos) private pure returns (uint x, uint y) {\\n        require(pos < GOBAN, \\\"Invalid position\\\");\\n        return (pos % WIDTH, pos / WIDTH);\\n    }\\n\\n    function getNeighbors(\\n        uint pos\\n    ) public pure returns (uint east, uint west, uint north, uint south) {\\n        (uint x, uint y) = positionToCoords(pos);\\n\\n        // Initialize all to 0\\n        east = 0;\\n        west = 0;\\n        north = 0;\\n        south = 0;\\n\\n        // Check each direction with boundary validation\\n        if (x + 1 < WIDTH) {\\n            east = y * WIDTH + (x + 1);\\n        }\\n        if (x > 0) {\\n            west = y * WIDTH + (x - 1);\\n        }\\n        if (y + 1 < WIDTH) {\\n            north = (y + 1) * WIDTH + x;\\n        }\\n        if (y > 0) {\\n            south = (y - 1) * WIDTH + x;\\n        }\\n    }\\n\\n    function hasConnection(uint pos1, uint pos2) private view returns (bool) {\\n        if (pos1 >= GOBAN || pos2 >= GOBAN) return false;\\n        if (intersections[pos1].state != intersections[pos2].state) return false;\\n        if (intersections[pos1].state == State.Empty) return false;\\n\\n        // Get coordinates\\n        (uint x1, uint y1) = positionToCoords(pos1);\\n        (uint x2, uint y2) = positionToCoords(pos2);\\n\\n        // Check if adjacent\\n        return ((x1 == x2 && (y1 + 1 == y2 || y1 == y2 + 1)) ||\\n            (y1 == y2 && (x1 + 1 == x2 || x1 == x2 + 1)));\\n    }\\n\\n    function getGroup(uint _target) public view returns (uint[] memory) {\\n        uint[] memory group = new uint[](MAX_GROUP_SIZE);\\n        bool[] memory visited = new bool[](GOBAN);\\n        uint groupSize = 0;\\n\\n        State targetState = intersections[_target].state;\\n        if (targetState == State.Empty) {\\n            return group;\\n        }\\n\\n        // Create explicit stack for DFS\\n        uint[] memory stack = new uint[](GOBAN);\\n        uint stackSize = 1;\\n        stack[0] = _target;\\n\\n        while (stackSize > 0) {\\n            // Pop from stack\\n            stackSize--;\\n            uint currentPos = stack[stackSize];\\n\\n            if (!visited[currentPos]) {\\n                visited[currentPos] = true;\\n                group[groupSize++] = currentPos;\\n\\n                // Get the current stone's coordinates\\n                (uint currentX, uint currentY) = getIntersection(currentPos);\\n\\n                // Explicitly check each direction and add connected stones of same color\\n\\n                // Check North\\n                if (currentY < WIDTH - 1) {\\n                    uint northPos = getIntersectionId(currentX, currentY + 1);\\n                    if (!visited[northPos] && intersections[northPos].state == targetState) {\\n                        stack[stackSize++] = northPos;\\n                    }\\n                }\\n\\n                // Check South\\n                if (currentY > 0) {\\n                    uint southPos = getIntersectionId(currentX, currentY - 1);\\n                    if (!visited[southPos] && intersections[southPos].state == targetState) {\\n                        stack[stackSize++] = southPos;\\n                    }\\n                }\\n\\n                // Check East\\n                if (currentX < WIDTH - 1) {\\n                    uint eastPos = getIntersectionId(currentX + 1, currentY);\\n                    if (!visited[eastPos] && intersections[eastPos].state == targetState) {\\n                        stack[stackSize++] = eastPos;\\n                    }\\n                }\\n\\n                // Check West\\n                if (currentX > 0) {\\n                    uint westPos = getIntersectionId(currentX - 1, currentY);\\n                    if (!visited[westPos] && intersections[westPos].state == targetState) {\\n                        stack[stackSize++] = westPos;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return group;\\n    }\\n\\n    function checkForCaptures(uint _movePosition, State _opposingColor) internal returns (bool) {\\n        bool capturedAny = false;\\n        bool[] memory processed = new bool[](GOBAN);\\n        uint totalCaptured = 0;\\n\\n        // Get position coordinates\\n        (uint x, uint y) = getIntersection(_movePosition);\\n\\n        // Create array to store groups we need to check\\n        uint[] memory groupsToCheck = new uint[](4);\\n        uint numGroups = 0;\\n\\n        // Add adjacent opposing stones to groups to check\\n        if (x > 0) {\\n            uint pos = getIntersectionId(x - 1, y);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (x < WIDTH - 1) {\\n            uint pos = getIntersectionId(x + 1, y);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (y > 0) {\\n            uint pos = getIntersectionId(x, y - 1);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (y < WIDTH - 1) {\\n            uint pos = getIntersectionId(x, y + 1);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n\\n        // Check each group for capture\\n        for (uint i = 0; i < numGroups; i++) {\\n            uint[] memory group = getGroup(groupsToCheck[i]);\\n            bool hasLiberties = false;\\n\\n            // Check group for liberties\\n            for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n                uint pos = group[j];\\n                if (countLiberties(pos) > 0) {\\n                    hasLiberties = true;\\n                    break;\\n                }\\n            }\\n\\n            // If no liberties, capture the group\\n            if (!hasLiberties) {\\n                uint captureCount = 0;\\n                for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n                    uint pos = group[j];\\n                    if (intersections[pos].state == _opposingColor) {\\n                        intersections[pos].state = State.Empty;\\n                        captureCount++;\\n                    }\\n                }\\n                if (captureCount > 0) {\\n                    capturedAny = true;\\n                    totalCaptured += captureCount;\\n                }\\n            }\\n        }\\n\\n        // Update capture count\\n        if (totalCaptured > 0) {\\n            if (_opposingColor == State.White) {\\n                capturedWhiteStones += totalCaptured;\\n            } else {\\n                capturedBlackStones += totalCaptured;\\n            }\\n            emit Capture(_opposingColor == State.White ? \\\"White\\\" : \\\"Black\\\", totalCaptured);\\n        }\\n\\n        return capturedAny;\\n    }\\n\\n    function hasGroupLiberties(uint[] memory group) private view returns (bool) {\\n        bool[] memory checked = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            (uint east, uint west, uint north, uint south) = getNeighbors(group[i]);\\n\\n            if (east != 0 && !checked[east] && intersections[east].state == State.Empty)\\n                return true;\\n            if (west != 0 && !checked[west] && intersections[west].state == State.Empty)\\n                return true;\\n            if (north != 0 && !checked[north] && intersections[north].state == State.Empty)\\n                return true;\\n            if (south != 0 && !checked[south] && intersections[south].state == State.Empty)\\n                return true;\\n\\n            checked[group[i]] = true;\\n        }\\n        return false;\\n    }\\n\\n    // Helper function for getGroup\\n    function contains(uint[] memory arr, uint val, uint size) private pure returns (bool) {\\n        for (uint i = 0; i < size; i++) {\\n            if (arr[i] == val) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Ends the game and calculates final scores\\n     */\\n    function end() private {\\n        blackScore = 1; // TO DO: implement proper scoring\\n        whiteScore = 0;\\n        emit End(blackScore > whiteScore ? \\\"Black wins\\\" : \\\"White wins\\\", blackScore, whiteScore);\\n    }\\n\\n    /**\\n     * @notice Checks if coordinates are outside the board\\n     * @param _a X coordinate\\n     * @param _b Y coordinate\\n     * @return bool True if position is off board\\n     */\\n    function isOffBoard(uint _a, uint _b) public pure returns (bool) {\\n        return _a >= WIDTH || _b >= WIDTH;\\n    }\\n\\n    /**\\n     * @notice Converts x,y coordinates to a board position ID\\n     * @param _a X coordinate\\n     * @param _b Y coordinate\\n     * @return uint Position ID\\n     */\\n    function getIntersectionId(uint _a, uint _b) public pure returns (uint) {\\n        return _a + _b * WIDTH;\\n    }\\n\\n    /**\\n     * @notice Converts a board position ID to x,y coordinates\\n     * @param _target Position ID\\n     * @return _x X coordinate\\n     * @return _y Y coordinate\\n     */\\n    function getIntersection(uint _target) public pure returns (uint _x, uint _y) {\\n        return (_target % WIDTH, _target / WIDTH);\\n    }\\n}\\n\",\"keccak256\":\"0x08197acf7d21b862290482889d4e20ad3a2f635fc6e87fc3afc9cdc072c5e9e9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002228380380620022288339810160408190526200003491620001f7565b6001600160a01b03808316608052811660a0819052600080546001600160a01b0319169091178155805b60138110156200012d5760005b601381101562000117576040805160608101825282815260208101849052908101600090526006846200009e8162000266565b95506101698110620000b457620000b462000282565b60030201600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836002811115620000f957620000f96200023a565b021790555090505080806200010e9062000266565b9150506200006b565b5080620001248162000266565b9150506200005e565b5061016981146200015b5760405162461bcd60e51b8152600401620001529062000298565b60405180910390fd5b6040517f5468652067616d652068617320737461727465642e00000000000000000000008152601501604051908190038120907f1ae8a3352c09a112af4762cb69bd600767fc7b8164c902a005c01d39a9578cb690600090a2505050620002d4565b60006001600160a01b0382165b92915050565b620001db81620001bd565b8114620001e757600080fd5b50565b8051620001ca81620001d0565b600080604083850312156200020f576200020f600080fd5b60006200021d8585620001ea565b92505060206200023085828601620001ea565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200027b576200027b62000250565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082528101620001ca81601781527f4552524f525f445552494e475f474f42414e5f494e4954000000000000000000602082015260400190565b60805160a051611ebe6200036a6000396000818161025f015281816105b20152818161068f015281816108e501528181610b3701528181610bd30152610c970152600081816102860152818161057e01528181610641015281816106b501528181610898015281816108bf01528181610b0301528181610b8501528181610bf901528181610c540152610d340152611ebe6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063a0811074116100d8578063ceb606541161008c578063dbcd191311610066578063dbcd191314610317578063e08074b314610329578063f16c9ca81461033257600080fd5b8063ceb60654146102e6578063d44d339414610306578063d6b53fc91461030e57600080fd5b8063ab28294c116100bd578063ab28294c146102b0578063bcfa8347146102b9578063bd552635146102d957600080fd5b8063a081107414610281578063a7a1ed72146102a857600080fd5b806368e24f001161012f578063881350881161011457806388135088146102175780638b2999031461023a5780638b8fd3bd1461025a57600080fd5b806368e24f00146101f95780637bc49a951461020257600080fd5b80634bd3b6d1116101605780634bd3b6d1146101bb5780634e3da995146101dd57806352df6d17146101f057600080fd5b806317754cd51461017c57806333f00eb41461019a575b600080fd5b610184606481565b6040516101919190611aad565b60405180910390f35b6101ad6101a8366004611ac5565b610345565b604051610191929190611aee565b6101ce6101c9366004611ac5565b610367565b60405161019193929190611b59565b6101846101eb366004611ac5565b610392565b61018460015481565b61018460055481565b610215610210366004611b81565b610573565b005b61022a610225366004611ac5565b610a09565b6040516101919493929190611bbe565b60005461024d906001600160a01b031681565b6040516101919190611c16565b61024d7f000000000000000000000000000000000000000000000000000000000000000081565b61024d7f000000000000000000000000000000000000000000000000000000000000000081565b610215610af8565b61018460025481565b6102cc6102c7366004611b81565b610ddc565b6040516101919190611c2c565b6003546102cc9060ff1681565b6102f96102f4366004611ac5565b610df8565b6040516101919190611c98565b610184601381565b61018460045481565b6003546102cc90610100900460ff1681565b61018461016981565b610184610340366004611b81565b6112a9565b600080610353601384611cbf565b61035e601385611ce9565b91509150915091565b600681610169811061037857600080fd5b600302018054600182015460029092015490925060ff1683565b60008080806103a0856112c0565b909250905060136103b2836001611cfd565b10801561040b5750600060066103d26103cc856001611cfd565b846112f8565b61016981106103e3576103e3611d10565b6003020160020160009054906101000a900460ff16600281111561040957610409611b10565b145b1561041e578261041a81611d26565b9350505b60008211801561047457506000600661043b6103cc600186611d3f565b610169811061044c5761044c611d10565b6003020160020160009054906101000a900460ff16600281111561047257610472611b10565b145b15610487578261048381611d26565b9350505b6013610494826001611cfd565b1080156104ed5750600060066104b4846104af856001611cfd565b6112f8565b61016981106104c5576104c5611d10565b6003020160020160009054906101000a900460ff1660028111156104eb576104eb611b10565b145b1561050057826104fc81611d26565b9350505b60008111801561055757506000600661051e846104af600186611d3f565b610169811061052f5761052f611d10565b6003020160020160009054906101000a900460ff16600281111561055557610555611b10565b145b1561056a578261056681611d26565b9350505b50909392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906105d55750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156105f35760405163300dd6bf60e21b815260040160405180910390fd5b6105fd8282610ddc565b15610634576040517ff118046700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066d576001610670565b60025b90506000600282600281111561068857610688611b10565b146106b3577f00000000000000000000000000000000000000000000000000000000000000006106d5565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b0380831691161461070657604051631cc191eb60e31b815260040160405180910390fd5b600061071285856112a9565b90506000600682610169811061072a5761072a611d10565b6003020160020160009054906101000a900460ff16600281111561075057610750611b10565b14610787576040517f178c94e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600682610169811061079c5761079c611d10565b6003020160020160006101000a81548160ff021916908360028111156107c4576107c4611b10565b02179055506000806107d583610392565b11905060006108058360028760028111156107f2576107f2611b10565b146107fe57600261133c565b600161133c565b905081158015610813575080155b1561088d576000600684610169811061082e5761082e611d10565b6003020160020160006101000a81548160ff0219169083600281111561085657610856611b10565b02179055506040517f37a4ff9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e3577f0000000000000000000000000000000000000000000000000000000000000000610905565b7f00000000000000000000000000000000000000000000000000000000000000005b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055600285600281111561094657610946611b10565b0361095b576003805461ff0019169055610966565b6003805460ff191690555b8587600287600281111561097c5761097c611b10565b146109a45760405180604001604052806005815260200164426c61636b60d81b8152506109c3565b60405180604001604052806005815260200164576869746560d81b8152505b6040516109d09190611d98565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a450505050505050565b600080600080600080610a1b876112c0565b6000975087965086955085945090925090506013610a3a836001611cfd565b1015610a6357610a4b826001611cfd565b610a56601383611da2565b610a609190611cfd565b95505b8115610a8c57610a74600183611d3f565b610a7f601383611da2565b610a899190611cfd565b94505b6013610a99826001611cfd565b1015610ac457816013610aad836001611cfd565b610ab79190611da2565b610ac19190611cfd565b93505b8015610aef57816013610ad8600184611d3f565b610ae29190611da2565b610aec9190611cfd565b92505b50509193509193565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610b5a5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610b785760405163300dd6bf60e21b815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb1576001610bb4565b60025b905060006002826002811115610bcc57610bcc611b10565b14610bf7577f0000000000000000000000000000000000000000000000000000000000000000610c19565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b03808316911614610c4a57604051631cc191eb60e31b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d19576003805461ff001916610100179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610ce490611dcb565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a4610db2565b6003805460ff19166001179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610d8190611de4565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a45b60035460ff168015610dcb5750600354610100900460ff165b15610dd857610dd8611a21565b5050565b6000601383101580610def575060138210155b90505b92915050565b604080516064808252610ca082019092526060916000919060208201610c8080368337505060408051610169808252612d408201909252929350600092915060208201612d20803683370190505090506000806006866101698110610e5f57610e5f611d10565b600302016002015460ff1690506000816002811115610e8057610e80611b10565b03610e8f575091949350505050565b60408051610169808252612d40820190925260009160208201612d20803683370190505090506000600190508782600081518110610ecf57610ecf611d10565b6020026020010181815250505b801561129d5780610eec81611ded565b9150506000828281518110610f0357610f03611d10565b60200260200101519050858181518110610f1f57610f1f611d10565b6020026020010151611297576001868281518110610f3f57610f3f611d10565b91151560209283029190910190910152808786610f5b81611d26565b975081518110610f6d57610f6d611d10565b602002602001018181525050600080610f8583610345565b9092509050610f9660016013611d3f565b811015611052576000610fae83610340846001611cfd565b9050888181518110610fc257610fc2611d10565b60200260200101511580156110205750866002811115610fe457610fe4611b10565b6006826101698110610ff857610ff8611d10565b6003020160020160009054906101000a900460ff16600281111561101e5761101e611b10565b145b156110505780868661103181611d26565b97508151811061104357611043611d10565b6020026020010181815250505b505b801561110d57600061106983610340600185611d3f565b905088818151811061107d5761107d611d10565b60200260200101511580156110db575086600281111561109f5761109f611b10565b60068261016981106110b3576110b3611d10565b6003020160020160009054906101000a900460ff1660028111156110d9576110d9611b10565b145b1561110b578086866110ec81611d26565b9750815181106110fe576110fe611d10565b6020026020010181815250505b505b61111960016013611d3f565b8210156111da576000611136611130846001611cfd565b836112a9565b905088818151811061114a5761114a611d10565b60200260200101511580156111a8575086600281111561116c5761116c611b10565b600682610169811061118057611180611d10565b6003020160020160009054906101000a900460ff1660028111156111a6576111a6611b10565b145b156111d8578086866111b981611d26565b9750815181106111cb576111cb611d10565b6020026020010181815250505b505b81156112945760006111f0611130600185611d3f565b905088818151811061120457611204611d10565b6020026020010151158015611262575086600281111561122657611226611b10565b600682610169811061123a5761123a611d10565b6003020160020160009054906101000a900460ff16600281111561126057611260611b10565b145b156112925780868661127381611d26565b97508151811061128557611285611d10565b6020026020010181815250505b505b50505b50610edc565b50939695505050505050565b60006112b6601383611da2565b610def9084611cfd565b60008061016983106112ed5760405162461bcd60e51b81526004016112e490611e36565b60405180910390fd5b610353601384611cbf565b600060138310801561130a5750601382105b6113265760405162461bcd60e51b81526004016112e490611e78565b82611332601384611da2565b610def9190611cfd565b60408051610169808252612d4082019092526000918291829160208201612d20803683370190505090506000808061137388610345565b60408051600480825260a082019092529294509092506000919060208201608080368337019050509050600083156114835760006113bb6113b5600187611d3f565b856112a9565b90508960028111156113cf576113cf611b10565b60068261016981106113e3576113e3611d10565b6003020160020160009054906101000a900460ff16600281111561140957611409611b10565b14801561142d575086818151811061142357611423611d10565b6020026020010151155b156114815780838361143e81611d26565b94508151811061145057611450611d10565b602002602001018181525050600187828151811061147057611470611d10565b911515602092830291909101909101525b505b61148f60016013611d3f565b84101561156e5760006114a66113b5866001611cfd565b90508960028111156114ba576114ba611b10565b60068261016981106114ce576114ce611d10565b6003020160020160009054906101000a900460ff1660028111156114f4576114f4611b10565b148015611518575086818151811061150e5761150e611d10565b6020026020010151155b1561156c5780838361152981611d26565b94508151811061153b5761153b611d10565b602002602001018181525050600187828151811061155b5761155b611d10565b911515602092830291909101909101525b505b821561164d57600061158585610340600187611d3f565b905089600281111561159957611599611b10565b60068261016981106115ad576115ad611d10565b6003020160020160009054906101000a900460ff1660028111156115d3576115d3611b10565b1480156115f757508681815181106115ed576115ed611d10565b6020026020010151155b1561164b5780838361160881611d26565b94508151811061161a5761161a611d10565b602002602001018181525050600187828151811061163a5761163a611d10565b911515602092830291909101909101525b505b61165960016013611d3f565b83101561173957600061167185610340866001611cfd565b905089600281111561168557611685611b10565b600682610169811061169957611699611d10565b6003020160020160009054906101000a900460ff1660028111156116bf576116bf611b10565b1480156116e357508681815181106116d9576116d9611d10565b6020026020010151155b15611737578083836116f481611d26565b94508151811061170657611706611d10565b602002602001018181525050600187828151811061172657611726611d10565b911515602092830291909101909101525b505b60005b8181101561192457600061176884838151811061175b5761175b611d10565b6020026020010151610df8565b90506000805b825181108015611798575082818151811061178b5761178b611d10565b6020026020010151600014155b156117e95760008382815181106117b1576117b1611d10565b6020026020010151905060006117c682610392565b11156117d65760019250506117e9565b50806117e181611d26565b91505061176e565b508061190f576000805b83518110801561181d575083818151811061181057611810611d10565b6020026020010151600014155b156118f557600084828151811061183657611836611d10565b602002602001015190508e600281111561185257611852611b10565b600682610169811061186657611866611d10565b6003020160020160009054906101000a900460ff16600281111561188c5761188c611b10565b036118e257600060068261016981106118a7576118a7611d10565b6003020160020160006101000a81548160ff021916908360028111156118cf576118cf611b10565b0217905550826118de81611d26565b9350505b50806118ed81611d26565b9150506117f3565b50801561190d5760019a5061190a818a611cfd565b98505b505b5050808061191c90611d26565b91505061173c565b508415611a1357600289600281111561193f5761193f611b10565b036119615784600160008282546119569190611cfd565b909155506119799050565b84600260008282546119739190611cfd565b90915550505b8460028a600281111561198e5761198e611b10565b146119b65760405180604001604052806005815260200164426c61636b60d81b8152506119d5565b60405180604001604052806005815260200164576869746560d81b8152505b6040516119e29190611d98565b604051908190038120907f027b4e3ead6ee520ed1c73f7bfff589c09482eea285375ebf0ed1b5a3c48003490600090a35b509498975050505050505050565b6001600481905560006005819055906040518060400160405280600a81526020017f426c61636b2077696e7300000000000000000000000000000000000000000000815250604051611a739190611d98565b604051908190038120907fc7dd86d9a6c26c1849d7416eece7c9d8d3f6877bdd3c45c79af349d9c64f873e90600090a4565b805b82525050565b60208101610df28284611aa5565b50565b8035610df2565b600060208284031215611ada57611ada600080fd5b6000611ae68484611abe565b949350505050565b60408101611afc8285611aa5565b611b096020830184611aa5565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60038110611abb57611abb611b10565b80611b4081611b26565b919050565b6000610df282611b36565b611aa781611b45565b60608101611b678286611aa5565b611b746020830185611aa5565b611ae66040830184611b50565b60008060408385031215611b9757611b97600080fd5b6000611ba38585611abe565b9250506020611bb485828601611abe565b9150509250929050565b60808101611bcc8287611aa5565b611bd96020830186611aa5565b611be66040830185611aa5565b611bf36060830184611aa5565b95945050505050565b60006001600160a01b038216610df2565b611aa781611bfc565b60208101610df28284611c0d565b801515611aa7565b60208101610df28284611c24565b611c448282611aa5565b5060200190565b60200190565b6000611c5b825190565b808452602093840193830160005b82811015611c8e578151611c7d8782611c3a565b965050602082019150600101611c69565b5093949350505050565b60208082528101610def8184611c51565b634e487b7160e01b600052601260045260246000fd5b600082611cce57611cce611ca9565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611cf857611cf8611ca9565b500490565b80820180821115610df257610df2611cd3565b634e487b7160e01b600052603260045260246000fd5b600060018201611d3857611d38611cd3565b5060010190565b81810381811115610df257610df2611cd3565b60005b83811015611d6d578181015183820152602001611d55565b50506000910152565b6000611d80825190565b611d8e818560208601611d52565b9290920192915050565b610df28183611d76565b8181028115828204841417610df257610df2611cd3565b64576869746560d81b81525b60050190565b611b4081611db9565b64426c61636b60d81b8152611dc5565b611b4081611dd4565b600081611dfc57611dfc611cd3565b506000190190565b60108152602081017f496e76616c696420706f736974696f6e0000000000000000000000000000000081529050611c4b565b60208082528101610df281611e04565b60138152602081017f496e76616c696420636f6f7264696e617465730000000000000000000000000081529050611c4b565b60208082528101610df281611e4656fea26469706673582212205cf4255b3b0df577507b2c7740a782c5c12fd2e3ccd426f39382f7926a6b0aa264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c8063a0811074116100d8578063ceb606541161008c578063dbcd191311610066578063dbcd191314610317578063e08074b314610329578063f16c9ca81461033257600080fd5b8063ceb60654146102e6578063d44d339414610306578063d6b53fc91461030e57600080fd5b8063ab28294c116100bd578063ab28294c146102b0578063bcfa8347146102b9578063bd552635146102d957600080fd5b8063a081107414610281578063a7a1ed72146102a857600080fd5b806368e24f001161012f578063881350881161011457806388135088146102175780638b2999031461023a5780638b8fd3bd1461025a57600080fd5b806368e24f00146101f95780637bc49a951461020257600080fd5b80634bd3b6d1116101605780634bd3b6d1146101bb5780634e3da995146101dd57806352df6d17146101f057600080fd5b806317754cd51461017c57806333f00eb41461019a575b600080fd5b610184606481565b6040516101919190611aad565b60405180910390f35b6101ad6101a8366004611ac5565b610345565b604051610191929190611aee565b6101ce6101c9366004611ac5565b610367565b60405161019193929190611b59565b6101846101eb366004611ac5565b610392565b61018460015481565b61018460055481565b610215610210366004611b81565b610573565b005b61022a610225366004611ac5565b610a09565b6040516101919493929190611bbe565b60005461024d906001600160a01b031681565b6040516101919190611c16565b61024d7f000000000000000000000000000000000000000000000000000000000000000081565b61024d7f000000000000000000000000000000000000000000000000000000000000000081565b610215610af8565b61018460025481565b6102cc6102c7366004611b81565b610ddc565b6040516101919190611c2c565b6003546102cc9060ff1681565b6102f96102f4366004611ac5565b610df8565b6040516101919190611c98565b610184601381565b61018460045481565b6003546102cc90610100900460ff1681565b61018461016981565b610184610340366004611b81565b6112a9565b600080610353601384611cbf565b61035e601385611ce9565b91509150915091565b600681610169811061037857600080fd5b600302018054600182015460029092015490925060ff1683565b60008080806103a0856112c0565b909250905060136103b2836001611cfd565b10801561040b5750600060066103d26103cc856001611cfd565b846112f8565b61016981106103e3576103e3611d10565b6003020160020160009054906101000a900460ff16600281111561040957610409611b10565b145b1561041e578261041a81611d26565b9350505b60008211801561047457506000600661043b6103cc600186611d3f565b610169811061044c5761044c611d10565b6003020160020160009054906101000a900460ff16600281111561047257610472611b10565b145b15610487578261048381611d26565b9350505b6013610494826001611cfd565b1080156104ed5750600060066104b4846104af856001611cfd565b6112f8565b61016981106104c5576104c5611d10565b6003020160020160009054906101000a900460ff1660028111156104eb576104eb611b10565b145b1561050057826104fc81611d26565b9350505b60008111801561055757506000600661051e846104af600186611d3f565b610169811061052f5761052f611d10565b6003020160020160009054906101000a900460ff16600281111561055557610555611b10565b145b1561056a578261056681611d26565b9350505b50909392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906105d55750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156105f35760405163300dd6bf60e21b815260040160405180910390fd5b6105fd8282610ddc565b15610634576040517ff118046700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066d576001610670565b60025b90506000600282600281111561068857610688611b10565b146106b3577f00000000000000000000000000000000000000000000000000000000000000006106d5565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b0380831691161461070657604051631cc191eb60e31b815260040160405180910390fd5b600061071285856112a9565b90506000600682610169811061072a5761072a611d10565b6003020160020160009054906101000a900460ff16600281111561075057610750611b10565b14610787576040517f178c94e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600682610169811061079c5761079c611d10565b6003020160020160006101000a81548160ff021916908360028111156107c4576107c4611b10565b02179055506000806107d583610392565b11905060006108058360028760028111156107f2576107f2611b10565b146107fe57600261133c565b600161133c565b905081158015610813575080155b1561088d576000600684610169811061082e5761082e611d10565b6003020160020160006101000a81548160ff0219169083600281111561085657610856611b10565b02179055506040517f37a4ff9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e3577f0000000000000000000000000000000000000000000000000000000000000000610905565b7f00000000000000000000000000000000000000000000000000000000000000005b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055600285600281111561094657610946611b10565b0361095b576003805461ff0019169055610966565b6003805460ff191690555b8587600287600281111561097c5761097c611b10565b146109a45760405180604001604052806005815260200164426c61636b60d81b8152506109c3565b60405180604001604052806005815260200164576869746560d81b8152505b6040516109d09190611d98565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a450505050505050565b600080600080600080610a1b876112c0565b6000975087965086955085945090925090506013610a3a836001611cfd565b1015610a6357610a4b826001611cfd565b610a56601383611da2565b610a609190611cfd565b95505b8115610a8c57610a74600183611d3f565b610a7f601383611da2565b610a899190611cfd565b94505b6013610a99826001611cfd565b1015610ac457816013610aad836001611cfd565b610ab79190611da2565b610ac19190611cfd565b93505b8015610aef57816013610ad8600184611d3f565b610ae29190611da2565b610aec9190611cfd565b92505b50509193509193565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610b5a5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610b785760405163300dd6bf60e21b815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb1576001610bb4565b60025b905060006002826002811115610bcc57610bcc611b10565b14610bf7577f0000000000000000000000000000000000000000000000000000000000000000610c19565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b03808316911614610c4a57604051631cc191eb60e31b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d19576003805461ff001916610100179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610ce490611dcb565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a4610db2565b6003805460ff19166001179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610d8190611de4565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a45b60035460ff168015610dcb5750600354610100900460ff165b15610dd857610dd8611a21565b5050565b6000601383101580610def575060138210155b90505b92915050565b604080516064808252610ca082019092526060916000919060208201610c8080368337505060408051610169808252612d408201909252929350600092915060208201612d20803683370190505090506000806006866101698110610e5f57610e5f611d10565b600302016002015460ff1690506000816002811115610e8057610e80611b10565b03610e8f575091949350505050565b60408051610169808252612d40820190925260009160208201612d20803683370190505090506000600190508782600081518110610ecf57610ecf611d10565b6020026020010181815250505b801561129d5780610eec81611ded565b9150506000828281518110610f0357610f03611d10565b60200260200101519050858181518110610f1f57610f1f611d10565b6020026020010151611297576001868281518110610f3f57610f3f611d10565b91151560209283029190910190910152808786610f5b81611d26565b975081518110610f6d57610f6d611d10565b602002602001018181525050600080610f8583610345565b9092509050610f9660016013611d3f565b811015611052576000610fae83610340846001611cfd565b9050888181518110610fc257610fc2611d10565b60200260200101511580156110205750866002811115610fe457610fe4611b10565b6006826101698110610ff857610ff8611d10565b6003020160020160009054906101000a900460ff16600281111561101e5761101e611b10565b145b156110505780868661103181611d26565b97508151811061104357611043611d10565b6020026020010181815250505b505b801561110d57600061106983610340600185611d3f565b905088818151811061107d5761107d611d10565b60200260200101511580156110db575086600281111561109f5761109f611b10565b60068261016981106110b3576110b3611d10565b6003020160020160009054906101000a900460ff1660028111156110d9576110d9611b10565b145b1561110b578086866110ec81611d26565b9750815181106110fe576110fe611d10565b6020026020010181815250505b505b61111960016013611d3f565b8210156111da576000611136611130846001611cfd565b836112a9565b905088818151811061114a5761114a611d10565b60200260200101511580156111a8575086600281111561116c5761116c611b10565b600682610169811061118057611180611d10565b6003020160020160009054906101000a900460ff1660028111156111a6576111a6611b10565b145b156111d8578086866111b981611d26565b9750815181106111cb576111cb611d10565b6020026020010181815250505b505b81156112945760006111f0611130600185611d3f565b905088818151811061120457611204611d10565b6020026020010151158015611262575086600281111561122657611226611b10565b600682610169811061123a5761123a611d10565b6003020160020160009054906101000a900460ff16600281111561126057611260611b10565b145b156112925780868661127381611d26565b97508151811061128557611285611d10565b6020026020010181815250505b505b50505b50610edc565b50939695505050505050565b60006112b6601383611da2565b610def9084611cfd565b60008061016983106112ed5760405162461bcd60e51b81526004016112e490611e36565b60405180910390fd5b610353601384611cbf565b600060138310801561130a5750601382105b6113265760405162461bcd60e51b81526004016112e490611e78565b82611332601384611da2565b610def9190611cfd565b60408051610169808252612d4082019092526000918291829160208201612d20803683370190505090506000808061137388610345565b60408051600480825260a082019092529294509092506000919060208201608080368337019050509050600083156114835760006113bb6113b5600187611d3f565b856112a9565b90508960028111156113cf576113cf611b10565b60068261016981106113e3576113e3611d10565b6003020160020160009054906101000a900460ff16600281111561140957611409611b10565b14801561142d575086818151811061142357611423611d10565b6020026020010151155b156114815780838361143e81611d26565b94508151811061145057611450611d10565b602002602001018181525050600187828151811061147057611470611d10565b911515602092830291909101909101525b505b61148f60016013611d3f565b84101561156e5760006114a66113b5866001611cfd565b90508960028111156114ba576114ba611b10565b60068261016981106114ce576114ce611d10565b6003020160020160009054906101000a900460ff1660028111156114f4576114f4611b10565b148015611518575086818151811061150e5761150e611d10565b6020026020010151155b1561156c5780838361152981611d26565b94508151811061153b5761153b611d10565b602002602001018181525050600187828151811061155b5761155b611d10565b911515602092830291909101909101525b505b821561164d57600061158585610340600187611d3f565b905089600281111561159957611599611b10565b60068261016981106115ad576115ad611d10565b6003020160020160009054906101000a900460ff1660028111156115d3576115d3611b10565b1480156115f757508681815181106115ed576115ed611d10565b6020026020010151155b1561164b5780838361160881611d26565b94508151811061161a5761161a611d10565b602002602001018181525050600187828151811061163a5761163a611d10565b911515602092830291909101909101525b505b61165960016013611d3f565b83101561173957600061167185610340866001611cfd565b905089600281111561168557611685611b10565b600682610169811061169957611699611d10565b6003020160020160009054906101000a900460ff1660028111156116bf576116bf611b10565b1480156116e357508681815181106116d9576116d9611d10565b6020026020010151155b15611737578083836116f481611d26565b94508151811061170657611706611d10565b602002602001018181525050600187828151811061172657611726611d10565b911515602092830291909101909101525b505b60005b8181101561192457600061176884838151811061175b5761175b611d10565b6020026020010151610df8565b90506000805b825181108015611798575082818151811061178b5761178b611d10565b6020026020010151600014155b156117e95760008382815181106117b1576117b1611d10565b6020026020010151905060006117c682610392565b11156117d65760019250506117e9565b50806117e181611d26565b91505061176e565b508061190f576000805b83518110801561181d575083818151811061181057611810611d10565b6020026020010151600014155b156118f557600084828151811061183657611836611d10565b602002602001015190508e600281111561185257611852611b10565b600682610169811061186657611866611d10565b6003020160020160009054906101000a900460ff16600281111561188c5761188c611b10565b036118e257600060068261016981106118a7576118a7611d10565b6003020160020160006101000a81548160ff021916908360028111156118cf576118cf611b10565b0217905550826118de81611d26565b9350505b50806118ed81611d26565b9150506117f3565b50801561190d5760019a5061190a818a611cfd565b98505b505b5050808061191c90611d26565b91505061173c565b508415611a1357600289600281111561193f5761193f611b10565b036119615784600160008282546119569190611cfd565b909155506119799050565b84600260008282546119739190611cfd565b90915550505b8460028a600281111561198e5761198e611b10565b146119b65760405180604001604052806005815260200164426c61636b60d81b8152506119d5565b60405180604001604052806005815260200164576869746560d81b8152505b6040516119e29190611d98565b604051908190038120907f027b4e3ead6ee520ed1c73f7bfff589c09482eea285375ebf0ed1b5a3c48003490600090a35b509498975050505050505050565b6001600481905560006005819055906040518060400160405280600a81526020017f426c61636b2077696e7300000000000000000000000000000000000000000000815250604051611a739190611d98565b604051908190038120907fc7dd86d9a6c26c1849d7416eece7c9d8d3f6877bdd3c45c79af349d9c64f873e90600090a4565b805b82525050565b60208101610df28284611aa5565b50565b8035610df2565b600060208284031215611ada57611ada600080fd5b6000611ae68484611abe565b949350505050565b60408101611afc8285611aa5565b611b096020830184611aa5565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60038110611abb57611abb611b10565b80611b4081611b26565b919050565b6000610df282611b36565b611aa781611b45565b60608101611b678286611aa5565b611b746020830185611aa5565b611ae66040830184611b50565b60008060408385031215611b9757611b97600080fd5b6000611ba38585611abe565b9250506020611bb485828601611abe565b9150509250929050565b60808101611bcc8287611aa5565b611bd96020830186611aa5565b611be66040830185611aa5565b611bf36060830184611aa5565b95945050505050565b60006001600160a01b038216610df2565b611aa781611bfc565b60208101610df28284611c0d565b801515611aa7565b60208101610df28284611c24565b611c448282611aa5565b5060200190565b60200190565b6000611c5b825190565b808452602093840193830160005b82811015611c8e578151611c7d8782611c3a565b965050602082019150600101611c69565b5093949350505050565b60208082528101610def8184611c51565b634e487b7160e01b600052601260045260246000fd5b600082611cce57611cce611ca9565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611cf857611cf8611ca9565b500490565b80820180821115610df257610df2611cd3565b634e487b7160e01b600052603260045260246000fd5b600060018201611d3857611d38611cd3565b5060010190565b81810381811115610df257610df2611cd3565b60005b83811015611d6d578181015183820152602001611d55565b50506000910152565b6000611d80825190565b611d8e818560208601611d52565b9290920192915050565b610df28183611d76565b8181028115828204841417610df257610df2611cd3565b64576869746560d81b81525b60050190565b611b4081611db9565b64426c61636b60d81b8152611dc5565b611b4081611dd4565b600081611dfc57611dfc611cd3565b506000190190565b60108152602081017f496e76616c696420706f736974696f6e0000000000000000000000000000000081529050611c4b565b60208082528101610df281611e04565b60138152602081017f496e76616c696420636f6f7264696e617465730000000000000000000000000081529050611c4b565b60208082528101610df281611e4656fea26469706673582212205cf4255b3b0df577507b2c7740a782c5c12fd2e3ccd426f39382f7926a6b0aa264736f6c63430008140033",
  "devdoc": {
    "author": "Claude",
    "custom:security-contact": "julien@beren.dev",
    "details": "Handles game logic for two players including stone placement, liberties, captures, and scoring",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Sets up the board and assigns players",
        "params": {
          "_black": "Address of the black player",
          "_white": "Address of the white player"
        }
      },
      "getIntersection(uint256)": {
        "params": {
          "_target": "Position ID"
        },
        "returns": {
          "_x": "X coordinate",
          "_y": "Y coordinate"
        }
      },
      "getIntersectionId(uint256,uint256)": {
        "params": {
          "_a": "X coordinate",
          "_b": "Y coordinate"
        },
        "returns": {
          "_0": "uint Position ID"
        }
      },
      "isOffBoard(uint256,uint256)": {
        "params": {
          "_a": "X coordinate",
          "_b": "Y coordinate"
        },
        "returns": {
          "_0": "bool True if position is off board"
        }
      },
      "pass()": {
        "details": "Two consecutive passes end the game"
      },
      "play(uint256,uint256)": {
        "details": "Handles turn logic, stone placement, and capture checking",
        "params": {
          "_x": "X coordinate",
          "_y": "Y coordinate"
        }
      }
    },
    "title": "Go",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes a new game of Go"
      },
      "getIntersection(uint256)": {
        "notice": "Converts a board position ID to x,y coordinates"
      },
      "getIntersectionId(uint256,uint256)": {
        "notice": "Converts x,y coordinates to a board position ID"
      },
      "isOffBoard(uint256,uint256)": {
        "notice": "Checks if coordinates are outside the board"
      },
      "pass()": {
        "notice": "Allows a player to pass their turn"
      },
      "play(uint256,uint256)": {
        "notice": "Places a stone on the board"
      }
    },
    "notice": "Implements the game of Go on the blockchain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31,
        "contract": "contracts/Go.sol:Go",
        "label": "turn",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33,
        "contract": "contracts/Go.sol:Go",
        "label": "capturedWhiteStones",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 35,
        "contract": "contracts/Go.sol:Go",
        "label": "capturedBlackStones",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 37,
        "contract": "contracts/Go.sol:Go",
        "label": "blackPassedOnce",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 39,
        "contract": "contracts/Go.sol:Go",
        "label": "whitePassedOnce",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 41,
        "contract": "contracts/Go.sol:Go",
        "label": "blackScore",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 43,
        "contract": "contracts/Go.sol:Go",
        "label": "whiteScore",
        "offset": 0,
        "slot": "5",
        "type": "t_int256"
      },
      {
        "astId": 57,
        "contract": "contracts/Go.sol:Go",
        "label": "intersections",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Intersection)52_storage)361_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Intersection)52_storage)361_storage": {
        "base": "t_struct(Intersection)52_storage",
        "encoding": "inplace",
        "label": "struct Go.Intersection[361]",
        "numberOfBytes": "34656"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(State)62": {
        "encoding": "inplace",
        "label": "enum Go.State",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(Intersection)52_storage": {
        "encoding": "inplace",
        "label": "struct Go.Intersection",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/Go.sol:Go",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/Go.sol:Go",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 51,
            "contract": "contracts/Go.sol:Go",
            "label": "state",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(State)62"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}