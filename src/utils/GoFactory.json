{
  "address": "0x2eF1A0c82747bAA7241816eEbcDF76B50059a432",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "white",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "black",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "white",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "black",
          "type": "address"
        }
      ],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5dba65d8d6a7aa02129c676f819a2970b69d2878e29d7d3a92d915347a5735be",
  "receipt": {
    "to": null,
    "from": "0x4006059FF62F6254E1fC8E38B9dff549449AfE69",
    "contractAddress": "0x2eF1A0c82747bAA7241816eEbcDF76B50059a432",
    "transactionIndex": 50,
    "gasUsed": "2287519",
    "logsBloom": "0x
    "blockHash": "0xc8ebaf5c59979fcdda435af04b6d728a518343338ff1dcc631ab05a9f3a40997",
    "transactionHash": "0x5dba65d8d6a7aa02129c676f819a2970b69d2878e29d7d3a92d915347a5735be",
    "logs": [],
    "blockNumber": 7090734,
    "cumulativeGasUsed": "9276743",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e325376e046a6a8e07192ed62f06985d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"white\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"black\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"white\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"black\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoFactory.sol\":\"GoFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOc\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Go.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\ncontract Go {\\n    error CallerNotAllowedToPlay();\\n    error NotYourTurn();\\n    error CannotPlayHere();\\n    error OffBoard();\\n    error MissingTwoConsecutivePass();\\n    error NoLiberties();\\n\\n    uint public constant GOBAN = 19 * 19;\\n    uint public constant WIDTH = 19;\\n    uint public constant MAX_GROUP_SIZE = 100;\\n\\n    address public immutable white;\\n    address public immutable black;\\n    address public turn;\\n\\n    uint public capturedWhiteStones;\\n    uint public capturedBlackStones;\\n    bool public blackPassedOnce;\\n    bool public whitePassedOnce;\\n    int public blackScore;\\n    int public whiteScore;\\n\\n    /**\\n     * @dev Represents a single point on the Go board\\n     * @param x The x coordinate\\n     * @param y The y coordinate\\n     * @param state The current state of this intersection (empty, black, or white)\\n     */\\n    struct Intersection {\\n        uint x;\\n        uint y;\\n        State state;\\n    }\\n\\n    Intersection[361] public intersections;\\n\\n    /**\\n     * @dev Represents possible states of an intersection\\n     */\\n    enum State {\\n        Empty,\\n        Black,\\n        White\\n    }\\n\\n    event Start(string indexed statement);\\n    event Move(string indexed player, uint indexed x, uint indexed y);\\n    event End(string indexed statement, int indexed blackScore, int indexed whiteScore);\\n    event Capture(string indexed player, uint indexed count);\\n\\n    /**\\n     * @notice Initializes a new game of Go\\n     * @dev Sets up the board and assigns players\\n     * @param _white Address of the white player\\n     * @param _black Address of the black player\\n     */\\n    constructor(address _white, address _black) {\\n        white = _white;\\n        black = _black;\\n        turn = black;\\n\\n        uint i;\\n        for (uint k; k < WIDTH; k++) {\\n            for (uint j; j < WIDTH; j++) {\\n                intersections[i++] = Intersection({x: j, y: k, state: State.Empty});\\n            }\\n        }\\n        require(i == GOBAN, \\\"ERROR_DURING_GOBAN_INIT\\\");\\n        emit Start(\\\"The game has started.\\\");\\n    }\\n\\n    // Separate function for processing captures\\n    function processCapture(uint[] memory group, State _opposingColor) private returns (uint) {\\n        uint captureCount = 0;\\n        for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n            if (intersections[group[j]].state == _opposingColor) {\\n                intersections[group[j]].state = State.Empty;\\n                captureCount++;\\n            }\\n        }\\n        return captureCount;\\n    }\\n\\n    // Modified capture processing\\n    function processGroupCapture(uint[] memory group, State _opposingColor) private returns (uint) {\\n        uint captureCount = 0;\\n        bool[] memory processed = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            uint pos = group[i];\\n            if (!processed[pos] && intersections[pos].state == _opposingColor) {\\n                intersections[pos].state = State.Empty;\\n                processed[pos] = true;\\n                captureCount++;\\n            }\\n        }\\n        return captureCount;\\n    }\\n\\n    // Helper function to count group liberties\\n    function countGroupLiberties(uint[] memory group) private view returns (uint) {\\n        uint liberties = 0;\\n        bool[] memory checkedPositions = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            (uint east, uint west, uint north, uint south) = getNeighbors(group[i]);\\n\\n            // Check each neighbor\\n            if (east != 0 && !checkedPositions[east]) {\\n                checkedPositions[east] = true;\\n                if (intersections[east].state == State.Empty) liberties++;\\n            }\\n            if (west != 0 && !checkedPositions[west]) {\\n                checkedPositions[west] = true;\\n                if (intersections[west].state == State.Empty) liberties++;\\n            }\\n            if (north != 0 && !checkedPositions[north]) {\\n                checkedPositions[north] = true;\\n                if (intersections[north].state == State.Empty) liberties++;\\n            }\\n            if (south != 0 && !checkedPositions[south]) {\\n                checkedPositions[south] = true;\\n                if (intersections[south].state == State.Empty) liberties++;\\n            }\\n        }\\n        return liberties;\\n    }\\n\\n    function countLiberties(uint _position) public view returns (uint) {\\n        uint liberties = 0;\\n        (uint x, uint y) = positionToCoords(_position);\\n\\n        // Check each adjacent position\\n        if (x + 1 < WIDTH && intersections[coordsToPosition(x + 1, y)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (x > 0 && intersections[coordsToPosition(x - 1, y)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (y + 1 < WIDTH && intersections[coordsToPosition(x, y + 1)].state == State.Empty) {\\n            liberties++;\\n        }\\n        if (y > 0 && intersections[coordsToPosition(x, y - 1)].state == State.Empty) {\\n            liberties++;\\n        }\\n\\n        return liberties;\\n    }\\n\\n    /**\\n     * @notice Places a stone on the board\\n     * @dev Handles turn logic, stone placement, and capture checking\\n     * @param _x X coordinate\\n     * @param _y Y coordinate\\n     */\\n    function play(uint _x, uint _y) public {\\n        if (msg.sender != white && msg.sender != black) revert CallerNotAllowedToPlay();\\n        if (isOffBoard(_x, _y)) revert OffBoard();\\n\\n        State playerColor = (msg.sender == white) ? State.White : State.Black;\\n        address expectedTurn = (playerColor == State.White) ? white : black;\\n        if (turn != expectedTurn) revert NotYourTurn();\\n\\n        uint move = getIntersectionId(_x, _y);\\n        if (intersections[move].state != State.Empty) revert CannotPlayHere();\\n\\n        intersections[move].state = playerColor;\\n\\n        bool hasLiberties = countLiberties(move) > 0;\\n        bool capturedOpponent = checkForCaptures(\\n            move,\\n            playerColor == State.White ? State.Black : State.White\\n        );\\n\\n        if (!hasLiberties && !capturedOpponent) {\\n            intersections[move].state = State.Empty;\\n            revert NoLiberties();\\n        }\\n\\n        turn = (msg.sender == white) ? black : white;\\n\\n        if (playerColor == State.White) {\\n            whitePassedOnce = false;\\n        } else {\\n            blackPassedOnce = false;\\n        }\\n\\n        emit Move(playerColor == State.White ? \\\"White\\\" : \\\"Black\\\", _x, _y);\\n    }\\n\\n    /**\\n     * @notice Allows a player to pass their turn\\n     * @dev Two consecutive passes end the game\\n     */\\n    function pass() public {\\n        if (msg.sender != white && msg.sender != black) revert CallerNotAllowedToPlay();\\n\\n        State playerColor = (msg.sender == white) ? State.White : State.Black;\\n        address expectedTurn = (playerColor == State.White) ? white : black;\\n        if (turn != expectedTurn) revert NotYourTurn();\\n\\n        if (msg.sender == white) {\\n            whitePassedOnce = true;\\n            turn = black;\\n            emit Move(\\\"White\\\", 42, 42);\\n        } else {\\n            blackPassedOnce = true;\\n            turn = white;\\n            emit Move(\\\"Black\\\", 42, 42);\\n        }\\n\\n        if (blackPassedOnce && whitePassedOnce) {\\n            end();\\n        }\\n    }\\n\\n    // Helper function to validate coordinates\\n    function isValidPosition(uint x, uint y) private pure returns (bool) {\\n        return x < WIDTH && y < WIDTH;\\n    }\\n\\n    // Helper functions for position conversions\\n    function coordsToPosition(uint x, uint y) private pure returns (uint) {\\n        require(x < WIDTH && y < WIDTH, \\\"Invalid coordinates\\\");\\n        return y * WIDTH + x;\\n    }\\n\\n    function positionToCoords(uint pos) private pure returns (uint x, uint y) {\\n        require(pos < GOBAN, \\\"Invalid position\\\");\\n        return (pos % WIDTH, pos / WIDTH);\\n    }\\n\\n    function getNeighbors(\\n        uint pos\\n    ) public pure returns (uint east, uint west, uint north, uint south) {\\n        (uint x, uint y) = positionToCoords(pos);\\n\\n        // Initialize all to 0\\n        east = 0;\\n        west = 0;\\n        north = 0;\\n        south = 0;\\n\\n        // Check each direction with boundary validation\\n        if (x + 1 < WIDTH) {\\n            east = y * WIDTH + (x + 1);\\n        }\\n        if (x > 0) {\\n            west = y * WIDTH + (x - 1);\\n        }\\n        if (y + 1 < WIDTH) {\\n            north = (y + 1) * WIDTH + x;\\n        }\\n        if (y > 0) {\\n            south = (y - 1) * WIDTH + x;\\n        }\\n    }\\n\\n    function hasConnection(uint pos1, uint pos2) private view returns (bool) {\\n        if (pos1 >= GOBAN || pos2 >= GOBAN) return false;\\n        if (intersections[pos1].state != intersections[pos2].state) return false;\\n        if (intersections[pos1].state == State.Empty) return false;\\n\\n        // Get coordinates\\n        (uint x1, uint y1) = positionToCoords(pos1);\\n        (uint x2, uint y2) = positionToCoords(pos2);\\n\\n        // Check if adjacent\\n        return ((x1 == x2 && (y1 + 1 == y2 || y1 == y2 + 1)) ||\\n            (y1 == y2 && (x1 + 1 == x2 || x1 == x2 + 1)));\\n    }\\n\\n    function getGroup(uint _target) public view returns (uint[] memory) {\\n        uint[] memory group = new uint[](MAX_GROUP_SIZE);\\n        bool[] memory visited = new bool[](GOBAN);\\n        uint groupSize = 0;\\n\\n        State targetState = intersections[_target].state;\\n        if (targetState == State.Empty) {\\n            return group;\\n        }\\n\\n        // Create explicit stack for DFS\\n        uint[] memory stack = new uint[](GOBAN);\\n        uint stackSize = 1;\\n        stack[0] = _target;\\n\\n        while (stackSize > 0) {\\n            // Pop from stack\\n            stackSize--;\\n            uint currentPos = stack[stackSize];\\n\\n            if (!visited[currentPos]) {\\n                visited[currentPos] = true;\\n                group[groupSize++] = currentPos;\\n\\n                // Get the current stone's coordinates\\n                (uint currentX, uint currentY) = getIntersection(currentPos);\\n\\n                // Explicitly check each direction and add connected stones of same color\\n\\n                // Check North\\n                if (currentY < WIDTH - 1) {\\n                    uint northPos = getIntersectionId(currentX, currentY + 1);\\n                    if (!visited[northPos] && intersections[northPos].state == targetState) {\\n                        stack[stackSize++] = northPos;\\n                    }\\n                }\\n\\n                // Check South\\n                if (currentY > 0) {\\n                    uint southPos = getIntersectionId(currentX, currentY - 1);\\n                    if (!visited[southPos] && intersections[southPos].state == targetState) {\\n                        stack[stackSize++] = southPos;\\n                    }\\n                }\\n\\n                // Check East\\n                if (currentX < WIDTH - 1) {\\n                    uint eastPos = getIntersectionId(currentX + 1, currentY);\\n                    if (!visited[eastPos] && intersections[eastPos].state == targetState) {\\n                        stack[stackSize++] = eastPos;\\n                    }\\n                }\\n\\n                // Check West\\n                if (currentX > 0) {\\n                    uint westPos = getIntersectionId(currentX - 1, currentY);\\n                    if (!visited[westPos] && intersections[westPos].state == targetState) {\\n                        stack[stackSize++] = westPos;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return group;\\n    }\\n\\n    function checkForCaptures(uint _movePosition, State _opposingColor) internal returns (bool) {\\n        bool capturedAny = false;\\n        bool[] memory processed = new bool[](GOBAN);\\n        uint totalCaptured = 0;\\n\\n        // Get position coordinates\\n        (uint x, uint y) = getIntersection(_movePosition);\\n\\n        // Create array to store groups we need to check\\n        uint[] memory groupsToCheck = new uint[](4);\\n        uint numGroups = 0;\\n\\n        // Add adjacent opposing stones to groups to check\\n        if (x > 0) {\\n            uint pos = getIntersectionId(x - 1, y);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (x < WIDTH - 1) {\\n            uint pos = getIntersectionId(x + 1, y);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (y > 0) {\\n            uint pos = getIntersectionId(x, y - 1);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n        if (y < WIDTH - 1) {\\n            uint pos = getIntersectionId(x, y + 1);\\n            if (intersections[pos].state == _opposingColor && !processed[pos]) {\\n                groupsToCheck[numGroups++] = pos;\\n                processed[pos] = true;\\n            }\\n        }\\n\\n        // Check each group for capture\\n        for (uint i = 0; i < numGroups; i++) {\\n            uint[] memory group = getGroup(groupsToCheck[i]);\\n            bool hasLiberties = false;\\n\\n            // Check group for liberties\\n            for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n                uint pos = group[j];\\n                if (countLiberties(pos) > 0) {\\n                    hasLiberties = true;\\n                    break;\\n                }\\n            }\\n\\n            // If no liberties, capture the group\\n            if (!hasLiberties) {\\n                uint captureCount = 0;\\n                for (uint j = 0; j < group.length && group[j] != 0; j++) {\\n                    uint pos = group[j];\\n                    if (intersections[pos].state == _opposingColor) {\\n                        intersections[pos].state = State.Empty;\\n                        captureCount++;\\n                    }\\n                }\\n                if (captureCount > 0) {\\n                    capturedAny = true;\\n                    totalCaptured += captureCount;\\n                }\\n            }\\n        }\\n\\n        // Update capture count\\n        if (totalCaptured > 0) {\\n            if (_opposingColor == State.White) {\\n                capturedWhiteStones += totalCaptured;\\n            } else {\\n                capturedBlackStones += totalCaptured;\\n            }\\n            emit Capture(_opposingColor == State.White ? \\\"White\\\" : \\\"Black\\\", totalCaptured);\\n        }\\n\\n        return capturedAny;\\n    }\\n\\n    function hasGroupLiberties(uint[] memory group) private view returns (bool) {\\n        bool[] memory checked = new bool[](GOBAN);\\n\\n        for (uint i = 0; i < group.length && group[i] != 0; i++) {\\n            (uint east, uint west, uint north, uint south) = getNeighbors(group[i]);\\n\\n            if (east != 0 && !checked[east] && intersections[east].state == State.Empty)\\n                return true;\\n            if (west != 0 && !checked[west] && intersections[west].state == State.Empty)\\n                return true;\\n            if (north != 0 && !checked[north] && intersections[north].state == State.Empty)\\n                return true;\\n            if (south != 0 && !checked[south] && intersections[south].state == State.Empty)\\n                return true;\\n\\n            checked[group[i]] = true;\\n        }\\n        return false;\\n    }\\n\\n    // Helper function for getGroup\\n    function contains(uint[] memory arr, uint val, uint size) private pure returns (bool) {\\n        for (uint i = 0; i < size; i++) {\\n            if (arr[i] == val) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Ends the game and calculates final scores\\n     */\\n    function end() private {\\n        blackScore = 1; // TO DO: implement proper scoring\\n        whiteScore = 0;\\n        emit End(blackScore > whiteScore ? \\\"Black wins\\\" : \\\"White wins\\\", blackScore, whiteScore);\\n    }\\n\\n    /**\\n     * @notice Checks if coordinates are outside the board\\n     * @param _a X coordinate\\n     * @param _b Y coordinate\\n     * @return bool True if position is off board\\n     */\\n    function isOffBoard(uint _a, uint _b) public pure returns (bool) {\\n        return _a >= WIDTH || _b >= WIDTH;\\n    }\\n\\n    /**\\n     * @notice Converts x,y coordinates to a board position ID\\n     * @param _a X coordinate\\n     * @param _b Y coordinate\\n     * @return uint Position ID\\n     */\\n    function getIntersectionId(uint _a, uint _b) public pure returns (uint) {\\n        return _a + _b * WIDTH;\\n    }\\n\\n    /**\\n     * @notice Converts a board position ID to x,y coordinates\\n     * @param _target Position ID\\n     * @return _x X coordinate\\n     * @return _y Y coordinate\\n     */\\n    function getIntersection(uint _target) public pure returns (uint _x, uint _y) {\\n        return (_target % WIDTH, _target / WIDTH);\\n    }\\n\\n    function getGameState()\\n        external\\n        view\\n        returns (\\n            Intersection[361] memory board,\\n            address currentTurn,\\n            uint256 whiteCaptured,\\n            uint256 blackCaptured,\\n            bool isWhitePassed,\\n            bool isBlackPassed\\n        )\\n    {\\n        return (\\n            intersections,\\n            turn,\\n            capturedWhiteStones,\\n            capturedBlackStones,\\n            whitePassedOnce,\\n            blackPassedOnce\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf3f6170ceb2cfeab9ef536117554bc0a75ea04b16a03d5c067b14780d9331ac0\",\"license\":\"GPL-3.0\"},\"contracts/GoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Go.sol\\\";\\n\\ncontract GoFactory {\\n    event GameCreated(\\n        uint256 indexed gameId,\\n        address indexed white,\\n        address indexed black,\\n        address gameAddress\\n    );\\n\\n    uint256 public gameCount;\\n    mapping(uint256 => address) public games;\\n\\n    function createGame(address white, address black) external returns (address) {\\n        require(white != address(0) && black != address(0), \\\"Invalid player addresses\\\");\\n        // require(white != black, \\\"Players must be different\\\");\\n\\n        Go newGame = new Go(white, black);\\n        uint256 gameId = gameCount;\\n        games[gameId] = address(newGame);\\n\\n        emit GameCreated(gameId, white, black, address(newGame));\\n        gameCount++;\\n\\n        return address(newGame);\\n    }\\n\\n    function getGame(uint256 gameId) external view returns (address) {\\n        require(gameId < gameCount, \\\"Game does not exist\\\");\\n        return games[gameId];\\n    }\\n}\\n\",\"keccak256\":\"0x06ee624bfcb16edd74ad405b9d4de02b0535711dc644237878a16ab5a6db4cec\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612896806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063117a5b90146100515780634d1975b414610090578063a2f77bcc146100a6578063a6f979ff146100b9575b600080fd5b61007a61005f36600461025c565b6001602052600090815260409020546001600160a01b031681565b60405161008791906102a5565b60405180910390f35b61009960005481565b60405161008791906102b9565b61007a6100b436600461025c565b6100cc565b61007a6100c73660046102db565b610113565b6000805482106100f75760405162461bcd60e51b81526004016100ee9061034c565b60405180910390fd5b506000908152600160205260409020546001600160a01b031690565b60006001600160a01b0383161580159061013557506001600160a01b03821615155b6101515760405162461bcd60e51b81526004016100ee9061038e565b6000838360405161016190610234565b61016c92919061039e565b604051809103906000f080158015610188573d6000803e3d6000fd5b5060008054808252600160205260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03858116919091179091559151929350918582169187169083907f63a3d7f77dca07e334cb3a181bbcbe04540c8e7e554a9832e4234acaac210fa69061020d9087906102a5565b60405180910390a4600080549080610224836103ef565b9091555091925050505b92915050565b6124588061040983390190565b805b811461024e57600080fd5b50565b803561022e81610241565b60006020828403121561027157610271600080fd5b600061027d8484610251565b949350505050565b60006001600160a01b03821661022e565b61029f81610285565b82525050565b6020810161022e8284610296565b8061029f565b6020810161022e82846102b3565b61024381610285565b803561022e816102c7565b600080604083850312156102f1576102f1600080fd5b60006102fd85856102d0565b925050602061030e858286016102d0565b9150509250929050565b60138152602081017f47616d6520646f6573206e6f7420657869737400000000000000000000000000815290505b60200190565b6020808252810161022e81610318565b60188152602081017f496e76616c696420706c6179657220616464726573736573000000000000000081529050610346565b6020808252810161022e8161035c565b604081016103ac8285610296565b6103b96020830184610296565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060018201610401576104016103c0565b506001019056fe60c06040523480156200001157600080fd5b5060405162002458380380620024588339810160408190526200003491620001f7565b6001600160a01b03808316608052811660a0819052600080546001600160a01b0319169091178155805b60138110156200012d5760005b601381101562000117576040805160608101825282815260208101849052908101600090526006846200009e8162000266565b95506101698110620000b457620000b462000282565b60030201600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836002811115620000f957620000f96200023a565b021790555090505080806200010e9062000266565b9150506200006b565b5080620001248162000266565b9150506200005e565b5061016981146200015b5760405162461bcd60e51b8152600401620001529062000298565b60405180910390fd5b6040517f5468652067616d652068617320737461727465642e00000000000000000000008152601501604051908190038120907f1ae8a3352c09a112af4762cb69bd600767fc7b8164c902a005c01d39a9578cb690600090a2505050620002d4565b60006001600160a01b0382165b92915050565b620001db81620001bd565b8114620001e757600080fd5b50565b8051620001ca81620001d0565b600080604083850312156200020f576200020f600080fd5b60006200021d8585620001ea565b92505060206200023085828601620001ea565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200027b576200027b62000250565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082528101620001ca81601781527f4552524f525f445552494e475f474f42414e5f494e4954000000000000000000602082015260400190565b60805160a0516120ee6200036a6000396000818161026a015281816105d7015281816106b40152818161090a01528181610b5c01528181610bf80152610cbc015260008181610291015281816105a301528181610666015281816106da015281816108bd015281816108e401528181610b2801528181610baa01528181610c1e01528181610c790152610d5901526120ee6000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c8063a7a1ed72116100d8578063ceb606541161008c578063dbcd191311610066578063dbcd19131461033c578063e08074b31461034e578063f16c9ca81461035757600080fd5b8063ceb606541461030b578063d44d33941461032b578063d6b53fc91461033357600080fd5b8063b7d0628b116100bd578063b7d0628b146102c4578063bcfa8347146102de578063bd552635146102fe57600080fd5b8063a7a1ed72146102b3578063ab28294c146102bb57600080fd5b806368e24f001161013a5780638b299903116101145780638b299903146102455780638b8fd3bd14610265578063a08110741461028c57600080fd5b806368e24f00146102045780637bc49a951461020d578063881350881461022257600080fd5b80634bd3b6d11161016b5780634bd3b6d1146101c65780634e3da995146101e857806352df6d17146101fb57600080fd5b806317754cd51461018757806333f00eb4146101a5575b600080fd5b61018f606481565b60405161019c9190611c02565b60405180910390f35b6101b86101b3366004611c1a565b61036a565b60405161019c929190611c43565b6101d96101d4366004611c1a565b61038c565b60405161019c93929190611cae565b61018f6101f6366004611c1a565b6103b7565b61018f60015481565b61018f60055481565b61022061021b366004611cd6565b610598565b005b610235610230366004611c1a565b610a2e565b60405161019c9493929190611d13565b600054610258906001600160a01b031681565b60405161019c9190611d6b565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b610220610b1d565b61018f60025481565b6102cc610e01565b60405161019c96959493929190611e02565b6102f16102ec366004611cd6565b610ed1565b60405161019c9190611e62565b6003546102f19060ff1681565b61031e610319366004611c1a565b610eed565b60405161019c9190611ec8565b61018f601381565b61018f60045481565b6003546102f190610100900460ff1681565b61018f61016981565b61018f610365366004611cd6565b61139e565b600080610378601384611eef565b610383601385611f19565b91509150915091565b600681610169811061039d57600080fd5b600302018054600182015460029092015490925060ff1683565b60008080806103c5856113b5565b909250905060136103d7836001611f2d565b1080156104305750600060066103f76103f1856001611f2d565b846113ed565b610169811061040857610408611f40565b6003020160020160009054906101000a900460ff16600281111561042e5761042e611c65565b145b15610443578261043f81611f56565b9350505b6000821180156104995750600060066104606103f1600186611f6f565b610169811061047157610471611f40565b6003020160020160009054906101000a900460ff16600281111561049757610497611c65565b145b156104ac57826104a881611f56565b9350505b60136104b9826001611f2d565b1080156105125750600060066104d9846104d4856001611f2d565b6113ed565b61016981106104ea576104ea611f40565b6003020160020160009054906101000a900460ff16600281111561051057610510611c65565b145b15610525578261052181611f56565b9350505b60008111801561057c575060006006610543846104d4600186611f6f565b610169811061055457610554611f40565b6003020160020160009054906101000a900460ff16600281111561057a5761057a611c65565b145b1561058f578261058b81611f56565b9350505b50909392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906105fa5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156106185760405163300dd6bf60e21b815260040160405180910390fd5b6106228282610ed1565b15610659576040517ff118046700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610692576001610695565b60025b9050600060028260028111156106ad576106ad611c65565b146106d8577f00000000000000000000000000000000000000000000000000000000000000006106fa565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b0380831691161461072b57604051631cc191eb60e31b815260040160405180910390fd5b6000610737858561139e565b90506000600682610169811061074f5761074f611f40565b6003020160020160009054906101000a900460ff16600281111561077557610775611c65565b146107ac576040517f178c94e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260068261016981106107c1576107c1611f40565b6003020160020160006101000a81548160ff021916908360028111156107e9576107e9611c65565b02179055506000806107fa836103b7565b119050600061082a83600287600281111561081757610817611c65565b14610823576002611431565b6001611431565b905081158015610838575080155b156108b2576000600684610169811061085357610853611f40565b6003020160020160006101000a81548160ff0219169083600281111561087b5761087b611c65565b02179055506040517f37a4ff9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610908577f000000000000000000000000000000000000000000000000000000000000000061092a565b7f00000000000000000000000000000000000000000000000000000000000000005b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055600285600281111561096b5761096b611c65565b03610980576003805461ff001916905561098b565b6003805460ff191690555b858760028760028111156109a1576109a1611c65565b146109c95760405180604001604052806005815260200164426c61636b60d81b8152506109e8565b60405180604001604052806005815260200164576869746560d81b8152505b6040516109f59190611fc8565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a450505050505050565b600080600080600080610a40876113b5565b6000975087965086955085945090925090506013610a5f836001611f2d565b1015610a8857610a70826001611f2d565b610a7b601383611fd2565b610a859190611f2d565b95505b8115610ab157610a99600183611f6f565b610aa4601383611fd2565b610aae9190611f2d565b94505b6013610abe826001611f2d565b1015610ae957816013610ad2836001611f2d565b610adc9190611fd2565b610ae69190611f2d565b93505b8015610b1457816013610afd600184611f6f565b610b079190611fd2565b610b119190611f2d565b92505b50509193509193565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610b7f5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610b9d5760405163300dd6bf60e21b815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd6576001610bd9565b60025b905060006002826002811115610bf157610bf1611c65565b14610c1c577f0000000000000000000000000000000000000000000000000000000000000000610c3e565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b03808316911614610c6f57604051631cc191eb60e31b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d3e576003805461ff001916610100179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610d0990611ffb565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a4610dd7565b6003805460ff19166001179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610da690612014565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a45b60035460ff168015610df05750600354610100900460ff165b15610dfd57610dfd611b16565b5050565b610e09611b9a565b6000805460015460025460035460408051612d20810190915285948594859485946006946001600160a01b039094169360ff610100830481169216908661016989835b82821015610eb757604080516060810182526003840286018054825260018101546020830152600280820154929391929184019160ff1690811115610e9357610e93611c65565b6002811115610ea457610ea4611c65565b8152505081526020019060010190610e4c565b505050509550955095509550955095509550909192939495565b6000601383101580610ee4575060138210155b90505b92915050565b604080516064808252610ca082019092526060916000919060208201610c8080368337505060408051610169808252612d408201909252929350600092915060208201612d20803683370190505090506000806006866101698110610f5457610f54611f40565b600302016002015460ff1690506000816002811115610f7557610f75611c65565b03610f84575091949350505050565b60408051610169808252612d40820190925260009160208201612d20803683370190505090506000600190508782600081518110610fc457610fc4611f40565b6020026020010181815250505b80156113925780610fe18161201d565b9150506000828281518110610ff857610ff8611f40565b6020026020010151905085818151811061101457611014611f40565b602002602001015161138c57600186828151811061103457611034611f40565b9115156020928302919091019091015280878661105081611f56565b97508151811061106257611062611f40565b60200260200101818152505060008061107a8361036a565b909250905061108b60016013611f6f565b8110156111475760006110a383610365846001611f2d565b90508881815181106110b7576110b7611f40565b602002602001015115801561111557508660028111156110d9576110d9611c65565b60068261016981106110ed576110ed611f40565b6003020160020160009054906101000a900460ff16600281111561111357611113611c65565b145b156111455780868661112681611f56565b97508151811061113857611138611f40565b6020026020010181815250505b505b801561120257600061115e83610365600185611f6f565b905088818151811061117257611172611f40565b60200260200101511580156111d0575086600281111561119457611194611c65565b60068261016981106111a8576111a8611f40565b6003020160020160009054906101000a900460ff1660028111156111ce576111ce611c65565b145b15611200578086866111e181611f56565b9750815181106111f3576111f3611f40565b6020026020010181815250505b505b61120e60016013611f6f565b8210156112cf57600061122b611225846001611f2d565b8361139e565b905088818151811061123f5761123f611f40565b602002602001015115801561129d575086600281111561126157611261611c65565b600682610169811061127557611275611f40565b6003020160020160009054906101000a900460ff16600281111561129b5761129b611c65565b145b156112cd578086866112ae81611f56565b9750815181106112c0576112c0611f40565b6020026020010181815250505b505b81156113895760006112e5611225600185611f6f565b90508881815181106112f9576112f9611f40565b6020026020010151158015611357575086600281111561131b5761131b611c65565b600682610169811061132f5761132f611f40565b6003020160020160009054906101000a900460ff16600281111561135557611355611c65565b145b156113875780868661136881611f56565b97508151811061137a5761137a611f40565b6020026020010181815250505b505b50505b50610fd1565b50939695505050505050565b60006113ab601383611fd2565b610ee49084611f2d565b60008061016983106113e25760405162461bcd60e51b81526004016113d990612066565b60405180910390fd5b610378601384611eef565b60006013831080156113ff5750601382105b61141b5760405162461bcd60e51b81526004016113d9906120a8565b82611427601384611fd2565b610ee49190611f2d565b60408051610169808252612d4082019092526000918291829160208201612d2080368337019050509050600080806114688861036a565b60408051600480825260a082019092529294509092506000919060208201608080368337019050509050600083156115785760006114b06114aa600187611f6f565b8561139e565b90508960028111156114c4576114c4611c65565b60068261016981106114d8576114d8611f40565b6003020160020160009054906101000a900460ff1660028111156114fe576114fe611c65565b148015611522575086818151811061151857611518611f40565b6020026020010151155b156115765780838361153381611f56565b94508151811061154557611545611f40565b602002602001018181525050600187828151811061156557611565611f40565b911515602092830291909101909101525b505b61158460016013611f6f565b84101561166357600061159b6114aa866001611f2d565b90508960028111156115af576115af611c65565b60068261016981106115c3576115c3611f40565b6003020160020160009054906101000a900460ff1660028111156115e9576115e9611c65565b14801561160d575086818151811061160357611603611f40565b6020026020010151155b156116615780838361161e81611f56565b94508151811061163057611630611f40565b602002602001018181525050600187828151811061165057611650611f40565b911515602092830291909101909101525b505b821561174257600061167a85610365600187611f6f565b905089600281111561168e5761168e611c65565b60068261016981106116a2576116a2611f40565b6003020160020160009054906101000a900460ff1660028111156116c8576116c8611c65565b1480156116ec57508681815181106116e2576116e2611f40565b6020026020010151155b15611740578083836116fd81611f56565b94508151811061170f5761170f611f40565b602002602001018181525050600187828151811061172f5761172f611f40565b911515602092830291909101909101525b505b61174e60016013611f6f565b83101561182e57600061176685610365866001611f2d565b905089600281111561177a5761177a611c65565b600682610169811061178e5761178e611f40565b6003020160020160009054906101000a900460ff1660028111156117b4576117b4611c65565b1480156117d857508681815181106117ce576117ce611f40565b6020026020010151155b1561182c578083836117e981611f56565b9450815181106117fb576117fb611f40565b602002602001018181525050600187828151811061181b5761181b611f40565b911515602092830291909101909101525b505b60005b81811015611a1957600061185d84838151811061185057611850611f40565b6020026020010151610eed565b90506000805b82518110801561188d575082818151811061188057611880611f40565b6020026020010151600014155b156118de5760008382815181106118a6576118a6611f40565b6020026020010151905060006118bb826103b7565b11156118cb5760019250506118de565b50806118d681611f56565b915050611863565b5080611a04576000805b835181108015611912575083818151811061190557611905611f40565b6020026020010151600014155b156119ea57600084828151811061192b5761192b611f40565b602002602001015190508e600281111561194757611947611c65565b600682610169811061195b5761195b611f40565b6003020160020160009054906101000a900460ff16600281111561198157611981611c65565b036119d7576000600682610169811061199c5761199c611f40565b6003020160020160006101000a81548160ff021916908360028111156119c4576119c4611c65565b0217905550826119d381611f56565b9350505b50806119e281611f56565b9150506118e8565b508015611a025760019a506119ff818a611f2d565b98505b505b50508080611a1190611f56565b915050611831565b508415611b08576002896002811115611a3457611a34611c65565b03611a56578460016000828254611a4b9190611f2d565b90915550611a6e9050565b8460026000828254611a689190611f2d565b90915550505b8460028a6002811115611a8357611a83611c65565b14611aab5760405180604001604052806005815260200164426c61636b60d81b815250611aca565b60405180604001604052806005815260200164576869746560d81b8152505b604051611ad79190611fc8565b604051908190038120907f027b4e3ead6ee520ed1c73f7bfff589c09482eea285375ebf0ed1b5a3c48003490600090a35b509498975050505050505050565b6001600481905560006005819055906040518060400160405280600a81526020017f426c61636b2077696e7300000000000000000000000000000000000000000000815250604051611b689190611fc8565b604051908190038120907fc7dd86d9a6c26c1849d7416eece7c9d8d3f6877bdd3c45c79af349d9c64f873e90600090a4565b60405180612d200160405280610169905b611bb3611bc9565b815260200190600190039081611bab5790505090565b6040518060600160405280600081526020016000815260200160006002811115611bf557611bf5611c65565b905290565b805b82525050565b60208101610ee78284611bfa565b50565b8035610ee7565b600060208284031215611c2f57611c2f600080fd5b6000611c3b8484611c13565b949350505050565b60408101611c518285611bfa565b611c5e6020830184611bfa565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60038110611c1057611c10611c65565b80611c9581611c7b565b919050565b6000610ee782611c8b565b611bfc81611c9a565b60608101611cbc8286611bfa565b611cc96020830185611bfa565b611c3b6040830184611ca5565b60008060408385031215611cec57611cec600080fd5b6000611cf88585611c13565b9250506020611d0985828601611c13565b9150509250929050565b60808101611d218287611bfa565b611d2e6020830186611bfa565b611d3b6040830185611bfa565b611d486060830184611bfa565b95945050505050565b60006001600160a01b038216610ee7565b611bfc81611d51565b60208101610ee78284611d62565b8051611d858382611bfa565b506020810151611d986020840182611bfa565b506040810151611dab6040840182611ca5565b505050565b611dba8282611d79565b5060600190565b60200190565b6101698160005b82811015611df3578151611de28682611db0565b955050602082019150600101611dce565b5050505050565b801515611bfc565b6188008101611e118289611dc7565b611e1f618760830188611d62565b611e2d618780830187611bfa565b611e3b6187a0830186611bfa565b611e496187c0830185611dfa565b611e576187e0830184611dfa565b979650505050505050565b60208101610ee78284611dfa565b611e7a8282611bfa565b5060200190565b6000611e8b825190565b808452602093840193830160005b82811015611ebe578151611ead8782611e70565b965050602082019150600101611e99565b5093949350505050565b60208082528101610ee48184611e81565b634e487b7160e01b600052601260045260246000fd5b600082611efe57611efe611ed9565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611f2857611f28611ed9565b500490565b80820180821115610ee757610ee7611f03565b634e487b7160e01b600052603260045260246000fd5b600060018201611f6857611f68611f03565b5060010190565b81810381811115610ee757610ee7611f03565b60005b83811015611f9d578181015183820152602001611f85565b50506000910152565b6000611fb0825190565b611fbe818560208601611f82565b9290920192915050565b610ee78183611fa6565b8181028115828204841417610ee757610ee7611f03565b64576869746560d81b81525b60050190565b611c9581611fe9565b64426c61636b60d81b8152611ff5565b611c9581612004565b60008161202c5761202c611f03565b506000190190565b60108152602081017f496e76616c696420706f736974696f6e0000000000000000000000000000000081529050611dc1565b60208082528101610ee781612034565b60138152602081017f496e76616c696420636f6f7264696e617465730000000000000000000000000081529050611dc1565b60208082528101610ee78161207656fea26469706673582212208cf6c2b3cc8645a1c61027f7d3f2ad23d4250d6eab79772e0b161b44911a8d2d64736f6c63430008140033a2646970667358221220d7c0dd323f284a7418f405c8d3ba754005bcfd28fc7c9147c3cb555e6a9fe91564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063117a5b90146100515780634d1975b414610090578063a2f77bcc146100a6578063a6f979ff146100b9575b600080fd5b61007a61005f36600461025c565b6001602052600090815260409020546001600160a01b031681565b60405161008791906102a5565b60405180910390f35b61009960005481565b60405161008791906102b9565b61007a6100b436600461025c565b6100cc565b61007a6100c73660046102db565b610113565b6000805482106100f75760405162461bcd60e51b81526004016100ee9061034c565b60405180910390fd5b506000908152600160205260409020546001600160a01b031690565b60006001600160a01b0383161580159061013557506001600160a01b03821615155b6101515760405162461bcd60e51b81526004016100ee9061038e565b6000838360405161016190610234565b61016c92919061039e565b604051809103906000f080158015610188573d6000803e3d6000fd5b5060008054808252600160205260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03858116919091179091559151929350918582169187169083907f63a3d7f77dca07e334cb3a181bbcbe04540c8e7e554a9832e4234acaac210fa69061020d9087906102a5565b60405180910390a4600080549080610224836103ef565b9091555091925050505b92915050565b6124588061040983390190565b805b811461024e57600080fd5b50565b803561022e81610241565b60006020828403121561027157610271600080fd5b600061027d8484610251565b949350505050565b60006001600160a01b03821661022e565b61029f81610285565b82525050565b6020810161022e8284610296565b8061029f565b6020810161022e82846102b3565b61024381610285565b803561022e816102c7565b600080604083850312156102f1576102f1600080fd5b60006102fd85856102d0565b925050602061030e858286016102d0565b9150509250929050565b60138152602081017f47616d6520646f6573206e6f7420657869737400000000000000000000000000815290505b60200190565b6020808252810161022e81610318565b60188152602081017f496e76616c696420706c6179657220616464726573736573000000000000000081529050610346565b6020808252810161022e8161035c565b604081016103ac8285610296565b6103b96020830184610296565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060018201610401576104016103c0565b506001019056fe60c06040523480156200001157600080fd5b5060405162002458380380620024588339810160408190526200003491620001f7565b6001600160a01b03808316608052811660a0819052600080546001600160a01b0319169091178155805b60138110156200012d5760005b601381101562000117576040805160608101825282815260208101849052908101600090526006846200009e8162000266565b95506101698110620000b457620000b462000282565b60030201600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836002811115620000f957620000f96200023a565b021790555090505080806200010e9062000266565b9150506200006b565b5080620001248162000266565b9150506200005e565b5061016981146200015b5760405162461bcd60e51b8152600401620001529062000298565b60405180910390fd5b6040517f5468652067616d652068617320737461727465642e00000000000000000000008152601501604051908190038120907f1ae8a3352c09a112af4762cb69bd600767fc7b8164c902a005c01d39a9578cb690600090a2505050620002d4565b60006001600160a01b0382165b92915050565b620001db81620001bd565b8114620001e757600080fd5b50565b8051620001ca81620001d0565b600080604083850312156200020f576200020f600080fd5b60006200021d8585620001ea565b92505060206200023085828601620001ea565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200027b576200027b62000250565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082528101620001ca81601781527f4552524f525f445552494e475f474f42414e5f494e4954000000000000000000602082015260400190565b60805160a0516120ee6200036a6000396000818161026a015281816105d7015281816106b40152818161090a01528181610b5c01528181610bf80152610cbc015260008181610291015281816105a301528181610666015281816106da015281816108bd015281816108e401528181610b2801528181610baa01528181610c1e01528181610c790152610d5901526120ee6000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c8063a7a1ed72116100d8578063ceb606541161008c578063dbcd191311610066578063dbcd19131461033c578063e08074b31461034e578063f16c9ca81461035757600080fd5b8063ceb606541461030b578063d44d33941461032b578063d6b53fc91461033357600080fd5b8063b7d0628b116100bd578063b7d0628b146102c4578063bcfa8347146102de578063bd552635146102fe57600080fd5b8063a7a1ed72146102b3578063ab28294c146102bb57600080fd5b806368e24f001161013a5780638b299903116101145780638b299903146102455780638b8fd3bd14610265578063a08110741461028c57600080fd5b806368e24f00146102045780637bc49a951461020d578063881350881461022257600080fd5b80634bd3b6d11161016b5780634bd3b6d1146101c65780634e3da995146101e857806352df6d17146101fb57600080fd5b806317754cd51461018757806333f00eb4146101a5575b600080fd5b61018f606481565b60405161019c9190611c02565b60405180910390f35b6101b86101b3366004611c1a565b61036a565b60405161019c929190611c43565b6101d96101d4366004611c1a565b61038c565b60405161019c93929190611cae565b61018f6101f6366004611c1a565b6103b7565b61018f60015481565b61018f60055481565b61022061021b366004611cd6565b610598565b005b610235610230366004611c1a565b610a2e565b60405161019c9493929190611d13565b600054610258906001600160a01b031681565b60405161019c9190611d6b565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b610220610b1d565b61018f60025481565b6102cc610e01565b60405161019c96959493929190611e02565b6102f16102ec366004611cd6565b610ed1565b60405161019c9190611e62565b6003546102f19060ff1681565b61031e610319366004611c1a565b610eed565b60405161019c9190611ec8565b61018f601381565b61018f60045481565b6003546102f190610100900460ff1681565b61018f61016981565b61018f610365366004611cd6565b61139e565b600080610378601384611eef565b610383601385611f19565b91509150915091565b600681610169811061039d57600080fd5b600302018054600182015460029092015490925060ff1683565b60008080806103c5856113b5565b909250905060136103d7836001611f2d565b1080156104305750600060066103f76103f1856001611f2d565b846113ed565b610169811061040857610408611f40565b6003020160020160009054906101000a900460ff16600281111561042e5761042e611c65565b145b15610443578261043f81611f56565b9350505b6000821180156104995750600060066104606103f1600186611f6f565b610169811061047157610471611f40565b6003020160020160009054906101000a900460ff16600281111561049757610497611c65565b145b156104ac57826104a881611f56565b9350505b60136104b9826001611f2d565b1080156105125750600060066104d9846104d4856001611f2d565b6113ed565b61016981106104ea576104ea611f40565b6003020160020160009054906101000a900460ff16600281111561051057610510611c65565b145b15610525578261052181611f56565b9350505b60008111801561057c575060006006610543846104d4600186611f6f565b610169811061055457610554611f40565b6003020160020160009054906101000a900460ff16600281111561057a5761057a611c65565b145b1561058f578261058b81611f56565b9350505b50909392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906105fa5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156106185760405163300dd6bf60e21b815260040160405180910390fd5b6106228282610ed1565b15610659576040517ff118046700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610692576001610695565b60025b9050600060028260028111156106ad576106ad611c65565b146106d8577f00000000000000000000000000000000000000000000000000000000000000006106fa565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b0380831691161461072b57604051631cc191eb60e31b815260040160405180910390fd5b6000610737858561139e565b90506000600682610169811061074f5761074f611f40565b6003020160020160009054906101000a900460ff16600281111561077557610775611c65565b146107ac576040517f178c94e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260068261016981106107c1576107c1611f40565b6003020160020160006101000a81548160ff021916908360028111156107e9576107e9611c65565b02179055506000806107fa836103b7565b119050600061082a83600287600281111561081757610817611c65565b14610823576002611431565b6001611431565b905081158015610838575080155b156108b2576000600684610169811061085357610853611f40565b6003020160020160006101000a81548160ff0219169083600281111561087b5761087b611c65565b02179055506040517f37a4ff9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610908577f000000000000000000000000000000000000000000000000000000000000000061092a565b7f00000000000000000000000000000000000000000000000000000000000000005b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055600285600281111561096b5761096b611c65565b03610980576003805461ff001916905561098b565b6003805460ff191690555b858760028760028111156109a1576109a1611c65565b146109c95760405180604001604052806005815260200164426c61636b60d81b8152506109e8565b60405180604001604052806005815260200164576869746560d81b8152505b6040516109f59190611fc8565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a450505050505050565b600080600080600080610a40876113b5565b6000975087965086955085945090925090506013610a5f836001611f2d565b1015610a8857610a70826001611f2d565b610a7b601383611fd2565b610a859190611f2d565b95505b8115610ab157610a99600183611f6f565b610aa4601383611fd2565b610aae9190611f2d565b94505b6013610abe826001611f2d565b1015610ae957816013610ad2836001611f2d565b610adc9190611fd2565b610ae69190611f2d565b93505b8015610b1457816013610afd600184611f6f565b610b079190611fd2565b610b119190611f2d565b92505b50509193509193565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610b7f5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610b9d5760405163300dd6bf60e21b815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd6576001610bd9565b60025b905060006002826002811115610bf157610bf1611c65565b14610c1c577f0000000000000000000000000000000000000000000000000000000000000000610c3e565b7f00000000000000000000000000000000000000000000000000000000000000005b6000549091506001600160a01b03808316911614610c6f57604051631cc191eb60e31b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d3e576003805461ff001916610100179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610d0990611ffb565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a4610dd7565b6003805460ff19166001179055600080546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff19909116179055604051602a908190610da690612014565b604051908190038120907fe366c922317dc3f4300e3ebdbda733b44c5cbb1e7b5c6cd28013fd7ab13ea7b590600090a45b60035460ff168015610df05750600354610100900460ff165b15610dfd57610dfd611b16565b5050565b610e09611b9a565b6000805460015460025460035460408051612d20810190915285948594859485946006946001600160a01b039094169360ff610100830481169216908661016989835b82821015610eb757604080516060810182526003840286018054825260018101546020830152600280820154929391929184019160ff1690811115610e9357610e93611c65565b6002811115610ea457610ea4611c65565b8152505081526020019060010190610e4c565b505050509550955095509550955095509550909192939495565b6000601383101580610ee4575060138210155b90505b92915050565b604080516064808252610ca082019092526060916000919060208201610c8080368337505060408051610169808252612d408201909252929350600092915060208201612d20803683370190505090506000806006866101698110610f5457610f54611f40565b600302016002015460ff1690506000816002811115610f7557610f75611c65565b03610f84575091949350505050565b60408051610169808252612d40820190925260009160208201612d20803683370190505090506000600190508782600081518110610fc457610fc4611f40565b6020026020010181815250505b80156113925780610fe18161201d565b9150506000828281518110610ff857610ff8611f40565b6020026020010151905085818151811061101457611014611f40565b602002602001015161138c57600186828151811061103457611034611f40565b9115156020928302919091019091015280878661105081611f56565b97508151811061106257611062611f40565b60200260200101818152505060008061107a8361036a565b909250905061108b60016013611f6f565b8110156111475760006110a383610365846001611f2d565b90508881815181106110b7576110b7611f40565b602002602001015115801561111557508660028111156110d9576110d9611c65565b60068261016981106110ed576110ed611f40565b6003020160020160009054906101000a900460ff16600281111561111357611113611c65565b145b156111455780868661112681611f56565b97508151811061113857611138611f40565b6020026020010181815250505b505b801561120257600061115e83610365600185611f6f565b905088818151811061117257611172611f40565b60200260200101511580156111d0575086600281111561119457611194611c65565b60068261016981106111a8576111a8611f40565b6003020160020160009054906101000a900460ff1660028111156111ce576111ce611c65565b145b15611200578086866111e181611f56565b9750815181106111f3576111f3611f40565b6020026020010181815250505b505b61120e60016013611f6f565b8210156112cf57600061122b611225846001611f2d565b8361139e565b905088818151811061123f5761123f611f40565b602002602001015115801561129d575086600281111561126157611261611c65565b600682610169811061127557611275611f40565b6003020160020160009054906101000a900460ff16600281111561129b5761129b611c65565b145b156112cd578086866112ae81611f56565b9750815181106112c0576112c0611f40565b6020026020010181815250505b505b81156113895760006112e5611225600185611f6f565b90508881815181106112f9576112f9611f40565b6020026020010151158015611357575086600281111561131b5761131b611c65565b600682610169811061132f5761132f611f40565b6003020160020160009054906101000a900460ff16600281111561135557611355611c65565b145b156113875780868661136881611f56565b97508151811061137a5761137a611f40565b6020026020010181815250505b505b50505b50610fd1565b50939695505050505050565b60006113ab601383611fd2565b610ee49084611f2d565b60008061016983106113e25760405162461bcd60e51b81526004016113d990612066565b60405180910390fd5b610378601384611eef565b60006013831080156113ff5750601382105b61141b5760405162461bcd60e51b81526004016113d9906120a8565b82611427601384611fd2565b610ee49190611f2d565b60408051610169808252612d4082019092526000918291829160208201612d2080368337019050509050600080806114688861036a565b60408051600480825260a082019092529294509092506000919060208201608080368337019050509050600083156115785760006114b06114aa600187611f6f565b8561139e565b90508960028111156114c4576114c4611c65565b60068261016981106114d8576114d8611f40565b6003020160020160009054906101000a900460ff1660028111156114fe576114fe611c65565b148015611522575086818151811061151857611518611f40565b6020026020010151155b156115765780838361153381611f56565b94508151811061154557611545611f40565b602002602001018181525050600187828151811061156557611565611f40565b911515602092830291909101909101525b505b61158460016013611f6f565b84101561166357600061159b6114aa866001611f2d565b90508960028111156115af576115af611c65565b60068261016981106115c3576115c3611f40565b6003020160020160009054906101000a900460ff1660028111156115e9576115e9611c65565b14801561160d575086818151811061160357611603611f40565b6020026020010151155b156116615780838361161e81611f56565b94508151811061163057611630611f40565b602002602001018181525050600187828151811061165057611650611f40565b911515602092830291909101909101525b505b821561174257600061167a85610365600187611f6f565b905089600281111561168e5761168e611c65565b60068261016981106116a2576116a2611f40565b6003020160020160009054906101000a900460ff1660028111156116c8576116c8611c65565b1480156116ec57508681815181106116e2576116e2611f40565b6020026020010151155b15611740578083836116fd81611f56565b94508151811061170f5761170f611f40565b602002602001018181525050600187828151811061172f5761172f611f40565b911515602092830291909101909101525b505b61174e60016013611f6f565b83101561182e57600061176685610365866001611f2d565b905089600281111561177a5761177a611c65565b600682610169811061178e5761178e611f40565b6003020160020160009054906101000a900460ff1660028111156117b4576117b4611c65565b1480156117d857508681815181106117ce576117ce611f40565b6020026020010151155b1561182c578083836117e981611f56565b9450815181106117fb576117fb611f40565b602002602001018181525050600187828151811061181b5761181b611f40565b911515602092830291909101909101525b505b60005b81811015611a1957600061185d84838151811061185057611850611f40565b6020026020010151610eed565b90506000805b82518110801561188d575082818151811061188057611880611f40565b6020026020010151600014155b156118de5760008382815181106118a6576118a6611f40565b6020026020010151905060006118bb826103b7565b11156118cb5760019250506118de565b50806118d681611f56565b915050611863565b5080611a04576000805b835181108015611912575083818151811061190557611905611f40565b6020026020010151600014155b156119ea57600084828151811061192b5761192b611f40565b602002602001015190508e600281111561194757611947611c65565b600682610169811061195b5761195b611f40565b6003020160020160009054906101000a900460ff16600281111561198157611981611c65565b036119d7576000600682610169811061199c5761199c611f40565b6003020160020160006101000a81548160ff021916908360028111156119c4576119c4611c65565b0217905550826119d381611f56565b9350505b50806119e281611f56565b9150506118e8565b508015611a025760019a506119ff818a611f2d565b98505b505b50508080611a1190611f56565b915050611831565b508415611b08576002896002811115611a3457611a34611c65565b03611a56578460016000828254611a4b9190611f2d565b90915550611a6e9050565b8460026000828254611a689190611f2d565b90915550505b8460028a6002811115611a8357611a83611c65565b14611aab5760405180604001604052806005815260200164426c61636b60d81b815250611aca565b60405180604001604052806005815260200164576869746560d81b8152505b604051611ad79190611fc8565b604051908190038120907f027b4e3ead6ee520ed1c73f7bfff589c09482eea285375ebf0ed1b5a3c48003490600090a35b509498975050505050505050565b6001600481905560006005819055906040518060400160405280600a81526020017f426c61636b2077696e7300000000000000000000000000000000000000000000815250604051611b689190611fc8565b604051908190038120907fc7dd86d9a6c26c1849d7416eece7c9d8d3f6877bdd3c45c79af349d9c64f873e90600090a4565b60405180612d200160405280610169905b611bb3611bc9565b815260200190600190039081611bab5790505090565b6040518060600160405280600081526020016000815260200160006002811115611bf557611bf5611c65565b905290565b805b82525050565b60208101610ee78284611bfa565b50565b8035610ee7565b600060208284031215611c2f57611c2f600080fd5b6000611c3b8484611c13565b949350505050565b60408101611c518285611bfa565b611c5e6020830184611bfa565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60038110611c1057611c10611c65565b80611c9581611c7b565b919050565b6000610ee782611c8b565b611bfc81611c9a565b60608101611cbc8286611bfa565b611cc96020830185611bfa565b611c3b6040830184611ca5565b60008060408385031215611cec57611cec600080fd5b6000611cf88585611c13565b9250506020611d0985828601611c13565b9150509250929050565b60808101611d218287611bfa565b611d2e6020830186611bfa565b611d3b6040830185611bfa565b611d486060830184611bfa565b95945050505050565b60006001600160a01b038216610ee7565b611bfc81611d51565b60208101610ee78284611d62565b8051611d858382611bfa565b506020810151611d986020840182611bfa565b506040810151611dab6040840182611ca5565b505050565b611dba8282611d79565b5060600190565b60200190565b6101698160005b82811015611df3578151611de28682611db0565b955050602082019150600101611dce565b5050505050565b801515611bfc565b6188008101611e118289611dc7565b611e1f618760830188611d62565b611e2d618780830187611bfa565b611e3b6187a0830186611bfa565b611e496187c0830185611dfa565b611e576187e0830184611dfa565b979650505050505050565b60208101610ee78284611dfa565b611e7a8282611bfa565b5060200190565b6000611e8b825190565b808452602093840193830160005b82811015611ebe578151611ead8782611e70565b965050602082019150600101611e99565b5093949350505050565b60208082528101610ee48184611e81565b634e487b7160e01b600052601260045260246000fd5b600082611efe57611efe611ed9565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611f2857611f28611ed9565b500490565b80820180821115610ee757610ee7611f03565b634e487b7160e01b600052603260045260246000fd5b600060018201611f6857611f68611f03565b5060010190565b81810381811115610ee757610ee7611f03565b60005b83811015611f9d578181015183820152602001611f85565b50506000910152565b6000611fb0825190565b611fbe818560208601611f82565b9290920192915050565b610ee78183611fa6565b8181028115828204841417610ee757610ee7611f03565b64576869746560d81b81525b60050190565b611c9581611fe9565b64426c61636b60d81b8152611ff5565b611c9581612004565b60008161202c5761202c611f03565b506000190190565b60108152602081017f496e76616c696420706f736974696f6e0000000000000000000000000000000081529050611dc1565b60208082528101610ee781612034565b60138152602081017f496e76616c696420636f6f7264696e617465730000000000000000000000000081529050611dc1565b60208082528101610ee78161207656fea26469706673582212208cf6c2b3cc8645a1c61027f7d3f2ad23d4250d6eab79772e0b161b44911a8d2d64736f6c63430008140033a2646970667358221220d7c0dd323f284a7418f405c8d3ba754005bcfd28fc7c9147c3cb555e6a9fe91564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2037,
        "contract": "contracts/GoFactory.sol:GoFactory",
        "label": "gameCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2041,
        "contract": "contracts/GoFactory.sol:GoFactory",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}